2024/03/01 13:58:02 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.18 | packaged by conda-forge | (default, Dec 23 2023, 17:21:28) [GCC 12.3.0]
    CUDA available: True
    numpy_random_seed: 741058078
    GPU 0,1,2,3: NVIDIA A100-PCIE-40GB
    CUDA_HOME: /softwares/cuda/11.3
    NVCC: Cuda compilation tools, release 11.3, V11.3.58
    GCC: gcc (crosstool-NG 1.24.0.133_b0863d8_dirty) 8.4.0
    PyTorch: 1.12.1+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2.1
    - Built with CuDNN 8.3.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1+cu113
    OpenCV: 4.9.0
    MMEngine: 0.9.0

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 741058078
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/03/01 13:58:03 - mmengine - INFO - Config:
backend_args = None
data_root = 'data/MOT17/'
dataset_type = 'ReIDDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False,
        interval=2000,
        max_keep_ckpts=3,
        save_best='auto',
        type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=False, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch',
        type='mmpretrain.ResNet'),
    data_preprocessor=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        to_rgb=True,
        type='ReIDDataPreprocessor'),
    head=dict(
        act_cfg=dict(type='ReLU'),
        fc_channels=1024,
        in_channels=256,
        loss_cls=dict(loss_weight=1.0, type='mmpretrain.CrossEntropyLoss'),
        loss_triplet=dict(loss_weight=1.0, margin=0.3, type='TripletLoss'),
        norm_cfg=dict(type='BN1d'),
        num_classes=380,
        num_fcs=1,
        out_channels=128,
        type='LinearReIDHead'),
    neck=dict(
        channel_mapper=dict(
            act_cfg=dict(type='LeakyReLU'),
            in_channels=[
                2048,
            ],
            kernel_size=1,
            norm_cfg=dict(type='BN'),
            out_channels=256),
        decoder=dict(
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.1,
                    cross_attn=True,
                    embed_dims=256,
                    num_heads=8),
                self_attn_cfg=dict(
                    attn_drop=0.1,
                    cross_attn=False,
                    embed_dims=256,
                    num_heads=8)),
            num_layers=4),
        encoder=dict(
            layer_cfg=dict(
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.1,
                    num_fcs=2),
                self_attn_cfg=dict(
                    batch_first=True, dropout=0.1, embed_dims=256,
                    num_heads=8)),
            num_layers=4),
        num_queries=256,
        positional_encoding=dict(normalize=True, num_feats=128),
        type='TestModel_neck',
        with_agg=False,
        with_conditionpos=False,
        with_decoder=False,
        with_encoder=True),
    type='BaseReID')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.1, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=1000, start_factor=0.001,
        type='LinearLR'),
    dict(
        begin=0,
        by_epoch=False,
        end=6,
        gamma=0.1,
        milestones=[
            5,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='reid/meta/val_20.txt',
        data_prefix=dict(img_path='reid/imgs'),
        data_root='data/MOT17/',
        pipeline=[
            dict(backend_args=None, to_float32=True, type='LoadImageFromFile'),
            dict(keep_ratio=False, scale=(
                128,
                256,
            ), type='Resize'),
            dict(type='PackReIDInputs'),
        ],
        triplet_sampler=None,
        type='ReIDDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    metric=[
        'mAP',
        'CMC',
    ], type='ReIDMetrics')
test_pipeline = [
    dict(backend_args=None, to_float32=True, type='LoadImageFromFile'),
    dict(keep_ratio=False, scale=(
        128,
        256,
    ), type='Resize'),
    dict(type='PackReIDInputs'),
]
train_cfg = dict(
    max_iters=140000, type='IterBasedTrainLoop', val_interval=1000)
train_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='reid/meta/train_80.txt',
        data_prefix=dict(img_path='reid/imgs'),
        data_root='data/MOT17/',
        pipeline=[
            dict(
                share_random_params=False,
                transforms=[
                    dict(
                        backend_args=None,
                        to_float32=True,
                        type='LoadImageFromFile'),
                    dict(
                        clip_object_border=False,
                        keep_ratio=False,
                        scale=(
                            128,
                            256,
                        ),
                        type='Resize'),
                    dict(direction='horizontal', prob=0.5, type='RandomFlip'),
                ],
                type='TransformBroadcaster'),
            dict(
                meta_keys=(
                    'flip',
                    'flip_direction',
                ), type='PackReIDInputs'),
        ],
        triplet_sampler=dict(ins_per_id=4, num_ids=16),
        type='ReIDDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(
        share_random_params=False,
        transforms=[
            dict(backend_args=None, to_float32=True, type='LoadImageFromFile'),
            dict(
                clip_object_border=False,
                keep_ratio=False,
                scale=(
                    128,
                    256,
                ),
                type='Resize'),
            dict(direction='horizontal', prob=0.5, type='RandomFlip'),
        ],
        type='TransformBroadcaster'),
    dict(meta_keys=(
        'flip',
        'flip_direction',
    ), type='PackReIDInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='reid/meta/val_20.txt',
        data_prefix=dict(img_path='reid/imgs'),
        data_root='data/MOT17/',
        pipeline=[
            dict(backend_args=None, to_float32=True, type='LoadImageFromFile'),
            dict(keep_ratio=False, scale=(
                128,
                256,
            ), type='Resize'),
            dict(type='PackReIDInputs'),
        ],
        triplet_sampler=None,
        type='ReIDDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    metric=[
        'mAP',
        'CMC',
    ], type='ReIDMetrics')
vis_backends = [
    dict(type='LocalVisBackend'),
    dict(type='TensorboardVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = './experiments/enc_b32'

2024/03/01 13:58:06 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/03/01 13:58:06 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of BaseReID  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.0.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.0.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.0.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.0.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.0.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.0.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.1.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.1.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.1.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.1.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.1.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.1.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.2.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.2.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.2.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.2.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.2.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.2.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.3.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.3.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.3.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.3.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.3.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.3.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.encoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.self_attn.qcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.self_attn.qcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.self_attn.qpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.self_attn.qpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.self_attn.kcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.self_attn.kcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.self_attn.kpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.self_attn.kpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.self_attn.v_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.self_attn.v_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.self_attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.self_attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.cross_attn.qcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.cross_attn.qcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.cross_attn.qpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.cross_attn.qpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.cross_attn.kcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.cross_attn.kcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.cross_attn.kpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.cross_attn.kpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.cross_attn.v_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.cross_attn.v_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.cross_attn.qpos_sine_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.cross_attn.qpos_sine_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.cross_attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.cross_attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.self_attn.qcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.self_attn.qcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.self_attn.qpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.self_attn.qpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.self_attn.kcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.self_attn.kcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.self_attn.kpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.self_attn.kpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.self_attn.v_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.self_attn.v_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.self_attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.self_attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.cross_attn.qcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.cross_attn.qcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.cross_attn.kcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.cross_attn.kcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.cross_attn.kpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.cross_attn.kpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.cross_attn.v_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.cross_attn.v_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.cross_attn.qpos_sine_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.cross_attn.qpos_sine_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.cross_attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.cross_attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.self_attn.qcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.self_attn.qcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.self_attn.qpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.self_attn.qpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.self_attn.kcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.self_attn.kcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.self_attn.kpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.self_attn.kpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.self_attn.v_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.self_attn.v_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.self_attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.self_attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.cross_attn.qcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.cross_attn.qcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.cross_attn.kcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.cross_attn.kcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.cross_attn.kpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.cross_attn.kpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.cross_attn.v_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.cross_attn.v_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.cross_attn.qpos_sine_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.cross_attn.qpos_sine_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.cross_attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.cross_attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.self_attn.qcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.self_attn.qcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.self_attn.qpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.self_attn.qpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.self_attn.kcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.self_attn.kcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.self_attn.kpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.self_attn.kpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.self_attn.v_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.self_attn.v_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.self_attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.self_attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.cross_attn.qcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.cross_attn.qcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.cross_attn.kcontent_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.cross_attn.kcontent_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.cross_attn.kpos_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.cross_attn.kpos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.cross_attn.v_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.cross_attn.v_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.cross_attn.qpos_sine_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.cross_attn.qpos_sine_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.cross_attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.cross_attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.post_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.post_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.query_scale.layers.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.query_scale.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.query_scale.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.query_scale.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.ref_point_head.layers.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.ref_point_head.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.decoder.ref_point_head.layers.1.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in TestModel  

neck.PartQuerier.decoder.ref_point_head.layers.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.PartQuerier.query_embedding.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.channel_mapper.convs.0.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.channel_mapper.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

neck.channel_mapper.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of BaseReID  

head.fcs.0.fc.weight - torch.Size([1024, 256]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fcs.0.fc.bias - torch.Size([1024]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fcs.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

head.fcs.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of BaseReID  

head.fc_out.weight - torch.Size([128, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc_out.bias - torch.Size([128]): 
NormalInit: mean=0, std=0.01, bias=0 

head.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

head.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of BaseReID  

head.classifier.weight - torch.Size([380, 128]): 
NormalInit: mean=0, std=0.01, bias=0 

head.classifier.bias - torch.Size([380]): 
NormalInit: mean=0, std=0.01, bias=0 
2024/03/01 13:58:10 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/03/01 13:58:10 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/03/01 13:58:10 - mmengine - INFO - Checkpoints will be saved to /home/kzy/project/mmdetection/experiments/enc_b32.
2024/03/01 13:58:35 - mmengine - INFO - Iter(train) [    50/140000]  lr: 5.0000e-04  eta: 19:18:57  time: 0.4969  data_time: 0.0075  memory: 7197  loss: 6.4445  triplet_loss: 0.5071  ce_loss: 5.9374  accuracy_top-1: 0.0000
2024/03/01 13:58:55 - mmengine - INFO - Iter(train) [   100/140000]  lr: 1.0000e-03  eta: 17:28:41  time: 0.4026  data_time: 0.0077  memory: 7197  loss: 6.2885  triplet_loss: 0.4297  ce_loss: 5.8588  accuracy_top-1: 0.0000
2024/03/01 13:59:15 - mmengine - INFO - Iter(train) [   150/140000]  lr: 1.5000e-03  eta: 16:37:55  time: 0.3849  data_time: 0.0077  memory: 7197  loss: 6.1726  triplet_loss: 0.3959  ce_loss: 5.7767  accuracy_top-1: 1.5625
2024/03/01 13:59:35 - mmengine - INFO - Iter(train) [   200/140000]  lr: 2.0000e-03  eta: 16:31:38  time: 0.4180  data_time: 0.0101  memory: 7197  loss: 6.0775  triplet_loss: 0.4130  ce_loss: 5.6646  accuracy_top-1: 0.0000
2024/03/01 13:59:54 - mmengine - INFO - Iter(train) [   250/140000]  lr: 2.5000e-03  eta: 16:09:44  time: 0.3794  data_time: 0.0098  memory: 7197  loss: 5.9457  triplet_loss: 0.4021  ce_loss: 5.5437  accuracy_top-1: 4.6875
2024/03/01 14:00:15 - mmengine - INFO - Iter(train) [   300/140000]  lr: 3.0000e-03  eta: 16:08:01  time: 0.4128  data_time: 0.0088  memory: 7197  loss: 5.7699  triplet_loss: 0.3982  ce_loss: 5.3717  accuracy_top-1: 6.2500
2024/03/01 14:00:34 - mmengine - INFO - Iter(train) [   350/140000]  lr: 3.5000e-03  eta: 15:55:29  time: 0.3791  data_time: 0.0085  memory: 7197  loss: 5.5738  triplet_loss: 0.4059  ce_loss: 5.1679  accuracy_top-1: 1.5625
2024/03/01 14:00:55 - mmengine - INFO - Iter(train) [   400/140000]  lr: 4.0000e-03  eta: 15:56:17  time: 0.4145  data_time: 0.0092  memory: 7197  loss: 5.4005  triplet_loss: 0.4314  ce_loss: 4.9691  accuracy_top-1: 0.0000
2024/03/01 14:01:14 - mmengine - INFO - Iter(train) [   450/140000]  lr: 4.5000e-03  eta: 15:48:49  time: 0.3835  data_time: 0.0086  memory: 7197  loss: 5.2210  triplet_loss: 0.4401  ce_loss: 4.7809  accuracy_top-1: 4.6875
2024/03/01 14:01:34 - mmengine - INFO - Iter(train) [   500/140000]  lr: 5.0000e-03  eta: 15:46:49  time: 0.4008  data_time: 0.0086  memory: 7197  loss: 5.0826  triplet_loss: 0.4694  ce_loss: 4.6132  accuracy_top-1: 7.8125
2024/03/01 14:01:54 - mmengine - INFO - Iter(train) [   550/140000]  lr: 5.5000e-03  eta: 15:45:05  time: 0.4007  data_time: 0.0085  memory: 7197  loss: 4.8679  triplet_loss: 0.4503  ce_loss: 4.4176  accuracy_top-1: 4.6875
2024/03/01 14:02:14 - mmengine - INFO - Iter(train) [   600/140000]  lr: 6.0000e-03  eta: 15:41:46  time: 0.3912  data_time: 0.0085  memory: 7197  loss: 4.8017  triplet_loss: 0.5123  ce_loss: 4.2894  accuracy_top-1: 28.1250
2024/03/01 14:02:34 - mmengine - INFO - Iter(train) [   650/140000]  lr: 6.5000e-03  eta: 15:42:01  time: 0.4086  data_time: 0.0084  memory: 7197  loss: 4.4583  triplet_loss: 0.4502  ce_loss: 4.0081  accuracy_top-1: 3.1250
2024/03/01 14:02:53 - mmengine - INFO - Iter(train) [   700/140000]  lr: 7.0000e-03  eta: 15:37:44  time: 0.3818  data_time: 0.0090  memory: 7197  loss: 4.4904  triplet_loss: 0.5557  ce_loss: 3.9348  accuracy_top-1: 20.3125
2024/03/01 14:03:14 - mmengine - INFO - Iter(train) [   750/140000]  lr: 7.5000e-03  eta: 15:39:17  time: 0.4161  data_time: 0.0088  memory: 7197  loss: 4.3731  triplet_loss: 0.5716  ce_loss: 3.8015  accuracy_top-1: 21.8750
2024/03/01 14:03:33 - mmengine - INFO - Iter(train) [   800/140000]  lr: 8.0000e-03  eta: 15:34:49  time: 0.3763  data_time: 0.0088  memory: 7197  loss: 4.0564  triplet_loss: 0.5399  ce_loss: 3.5164  accuracy_top-1: 29.6875
2024/03/01 14:03:53 - mmengine - INFO - Iter(train) [   850/140000]  lr: 8.5000e-03  eta: 15:35:59  time: 0.4139  data_time: 0.0084  memory: 7197  loss: 4.0618  triplet_loss: 0.5794  ce_loss: 3.4824  accuracy_top-1: 9.3750
2024/03/01 14:04:12 - mmengine - INFO - Iter(train) [   900/140000]  lr: 9.0000e-03  eta: 15:32:01  time: 0.3754  data_time: 0.0085  memory: 7197  loss: 4.0507  triplet_loss: 0.6529  ce_loss: 3.3978  accuracy_top-1: 17.1875
2024/03/01 14:04:33 - mmengine - INFO - Iter(train) [   950/140000]  lr: 9.5000e-03  eta: 15:34:02  time: 0.4213  data_time: 0.0082  memory: 7197  loss: 3.9438  triplet_loss: 0.6690  ce_loss: 3.2749  accuracy_top-1: 12.5000
2024/03/01 14:04:53 - mmengine - INFO - Exp name: reid_testmodel_20240301_135802
2024/03/01 14:04:53 - mmengine - INFO - Iter(train) [  1000/140000]  lr: 1.0000e-02  eta: 15:32:08  time: 0.3895  data_time: 0.0082  memory: 7197  loss: 3.9965  triplet_loss: 0.7186  ce_loss: 3.2779  accuracy_top-1: 29.6875
2024/03/01 14:04:54 - mmengine - INFO - Iter(val) [  50/9234]    eta: 0:04:43  time: 0.0308  data_time: 0.0049  memory: 424  
2024/03/01 14:04:56 - mmengine - INFO - Iter(val) [ 100/9234]    eta: 0:04:40  time: 0.0306  data_time: 0.0013  memory: 424  
2024/03/01 14:04:57 - mmengine - INFO - Iter(val) [ 150/9234]    eta: 0:04:18  time: 0.0241  data_time: 0.0012  memory: 424  
2024/03/01 14:04:58 - mmengine - INFO - Iter(val) [ 200/9234]    eta: 0:04:10  time: 0.0255  data_time: 0.0013  memory: 424  
2024/03/01 14:05:00 - mmengine - INFO - Iter(val) [ 250/9234]    eta: 0:04:10  time: 0.0284  data_time: 0.0012  memory: 424  
2024/03/01 14:05:01 - mmengine - INFO - Iter(val) [ 300/9234]    eta: 0:04:05  time: 0.0253  data_time: 0.0012  memory: 424  
2024/03/01 14:05:02 - mmengine - INFO - Iter(val) [ 350/9234]    eta: 0:03:59  time: 0.0241  data_time: 0.0012  memory: 424  
2024/03/01 14:05:03 - mmengine - INFO - Iter(val) [ 400/9234]    eta: 0:03:55  time: 0.0243  data_time: 0.0012  memory: 424  
2024/03/01 14:05:05 - mmengine - INFO - Iter(val) [ 450/9234]    eta: 0:03:54  time: 0.0269  data_time: 0.0011  memory: 424  
2024/03/01 14:05:06 - mmengine - INFO - Iter(val) [ 500/9234]    eta: 0:03:50  time: 0.0233  data_time: 0.0011  memory: 424  
2024/03/01 14:05:07 - mmengine - INFO - Iter(val) [ 550/9234]    eta: 0:03:47  time: 0.0251  data_time: 0.0012  memory: 424  
2024/03/01 14:05:08 - mmengine - INFO - Iter(val) [ 600/9234]    eta: 0:03:45  time: 0.0255  data_time: 0.0012  memory: 424  
2024/03/01 14:05:10 - mmengine - INFO - Iter(val) [ 650/9234]    eta: 0:03:45  time: 0.0278  data_time: 0.0012  memory: 424  
2024/03/01 14:05:11 - mmengine - INFO - Iter(val) [ 700/9234]    eta: 0:03:40  time: 0.0195  data_time: 0.0010  memory: 424  
2024/03/01 14:05:12 - mmengine - INFO - Iter(val) [ 750/9234]    eta: 0:03:38  time: 0.0246  data_time: 0.0012  memory: 424  
2024/03/01 14:05:13 - mmengine - INFO - Iter(val) [ 800/9234]    eta: 0:03:35  time: 0.0230  data_time: 0.0010  memory: 424  
2024/03/01 14:05:15 - mmengine - INFO - Iter(val) [ 850/9234]    eta: 0:03:34  time: 0.0254  data_time: 0.0010  memory: 424  
2024/03/01 14:05:16 - mmengine - INFO - Iter(val) [ 900/9234]    eta: 0:03:31  time: 0.0235  data_time: 0.0011  memory: 424  
2024/03/01 14:05:17 - mmengine - INFO - Iter(val) [ 950/9234]    eta: 0:03:30  time: 0.0250  data_time: 0.0011  memory: 424  
2024/03/01 14:05:18 - mmengine - INFO - Iter(val) [1000/9234]    eta: 0:03:30  time: 0.0282  data_time: 0.0014  memory: 424  
2024/03/01 14:05:20 - mmengine - INFO - Iter(val) [1050/9234]    eta: 0:03:28  time: 0.0227  data_time: 0.0010  memory: 424  
2024/03/01 14:05:21 - mmengine - INFO - Iter(val) [1100/9234]    eta: 0:03:26  time: 0.0249  data_time: 0.0011  memory: 424  
2024/03/01 14:05:22 - mmengine - INFO - Iter(val) [1150/9234]    eta: 0:03:25  time: 0.0248  data_time: 0.0011  memory: 424  
2024/03/01 14:05:23 - mmengine - INFO - Iter(val) [1200/9234]    eta: 0:03:24  time: 0.0275  data_time: 0.0011  memory: 424  
2024/03/01 14:05:25 - mmengine - INFO - Iter(val) [1250/9234]    eta: 0:03:23  time: 0.0259  data_time: 0.0011  memory: 424  
2024/03/01 14:05:26 - mmengine - INFO - Iter(val) [1300/9234]    eta: 0:03:21  time: 0.0246  data_time: 0.0011  memory: 424  
2024/03/01 14:05:27 - mmengine - INFO - Iter(val) [1350/9234]    eta: 0:03:20  time: 0.0246  data_time: 0.0011  memory: 424  
2024/03/01 14:05:29 - mmengine - INFO - Iter(val) [1400/9234]    eta: 0:03:19  time: 0.0266  data_time: 0.0012  memory: 424  
2024/03/01 14:05:30 - mmengine - INFO - Iter(val) [1450/9234]    eta: 0:03:17  time: 0.0235  data_time: 0.0011  memory: 424  
2024/03/01 14:05:31 - mmengine - INFO - Iter(val) [1500/9234]    eta: 0:03:15  time: 0.0241  data_time: 0.0012  memory: 424  
2024/03/01 14:05:32 - mmengine - INFO - Iter(val) [1550/9234]    eta: 0:03:15  time: 0.0275  data_time: 0.0011  memory: 424  
2024/03/01 14:05:33 - mmengine - INFO - Iter(val) [1600/9234]    eta: 0:03:13  time: 0.0235  data_time: 0.0011  memory: 424  
2024/03/01 14:05:35 - mmengine - INFO - Iter(val) [1650/9234]    eta: 0:03:12  time: 0.0265  data_time: 0.0012  memory: 424  
2024/03/01 14:05:36 - mmengine - INFO - Iter(val) [1700/9234]    eta: 0:03:10  time: 0.0233  data_time: 0.0011  memory: 424  
2024/03/01 14:05:37 - mmengine - INFO - Iter(val) [1750/9234]    eta: 0:03:09  time: 0.0270  data_time: 0.0011  memory: 424  
2024/03/01 14:05:39 - mmengine - INFO - Iter(val) [1800/9234]    eta: 0:03:08  time: 0.0234  data_time: 0.0010  memory: 424  
2024/03/01 14:05:40 - mmengine - INFO - Iter(val) [1850/9234]    eta: 0:03:06  time: 0.0255  data_time: 0.0011  memory: 424  
2024/03/01 14:05:41 - mmengine - INFO - Iter(val) [1900/9234]    eta: 0:03:06  time: 0.0307  data_time: 0.0013  memory: 424  
2024/03/01 14:05:42 - mmengine - INFO - Iter(val) [1950/9234]    eta: 0:03:04  time: 0.0192  data_time: 0.0009  memory: 424  
2024/03/01 14:05:43 - mmengine - INFO - Iter(val) [2000/9234]    eta: 0:03:02  time: 0.0201  data_time: 0.0010  memory: 424  
2024/03/01 14:05:44 - mmengine - INFO - Iter(val) [2050/9234]    eta: 0:03:00  time: 0.0229  data_time: 0.0010  memory: 424  
2024/03/01 14:05:46 - mmengine - INFO - Iter(val) [2100/9234]    eta: 0:02:59  time: 0.0263  data_time: 0.0012  memory: 424  
2024/03/01 14:05:47 - mmengine - INFO - Iter(val) [2150/9234]    eta: 0:02:57  time: 0.0228  data_time: 0.0009  memory: 424  
2024/03/01 14:05:48 - mmengine - INFO - Iter(val) [2200/9234]    eta: 0:02:56  time: 0.0246  data_time: 0.0011  memory: 424  
2024/03/01 14:05:49 - mmengine - INFO - Iter(val) [2250/9234]    eta: 0:02:55  time: 0.0248  data_time: 0.0011  memory: 424  
2024/03/01 14:05:51 - mmengine - INFO - Iter(val) [2300/9234]    eta: 0:02:54  time: 0.0294  data_time: 0.0012  memory: 424  
2024/03/01 14:05:52 - mmengine - INFO - Iter(val) [2350/9234]    eta: 0:02:53  time: 0.0238  data_time: 0.0010  memory: 424  
2024/03/01 14:05:53 - mmengine - INFO - Iter(val) [2400/9234]    eta: 0:02:51  time: 0.0231  data_time: 0.0010  memory: 424  
2024/03/01 14:05:55 - mmengine - INFO - Iter(val) [2450/9234]    eta: 0:02:50  time: 0.0263  data_time: 0.0010  memory: 424  
2024/03/01 14:05:56 - mmengine - INFO - Iter(val) [2500/9234]    eta: 0:02:48  time: 0.0227  data_time: 0.0010  memory: 424  
2024/03/01 14:05:57 - mmengine - INFO - Iter(val) [2550/9234]    eta: 0:02:47  time: 0.0231  data_time: 0.0011  memory: 424  
2024/03/01 14:05:58 - mmengine - INFO - Iter(val) [2600/9234]    eta: 0:02:45  time: 0.0237  data_time: 0.0010  memory: 424  
2024/03/01 14:05:59 - mmengine - INFO - Iter(val) [2650/9234]    eta: 0:02:44  time: 0.0260  data_time: 0.0012  memory: 424  
2024/03/01 14:06:01 - mmengine - INFO - Iter(val) [2700/9234]    eta: 0:02:43  time: 0.0233  data_time: 0.0011  memory: 424  
2024/03/01 14:06:02 - mmengine - INFO - Iter(val) [2750/9234]    eta: 0:02:42  time: 0.0252  data_time: 0.0011  memory: 424  
2024/03/01 14:06:03 - mmengine - INFO - Iter(val) [2800/9234]    eta: 0:02:40  time: 0.0240  data_time: 0.0010  memory: 424  
2024/03/01 14:06:04 - mmengine - INFO - Iter(val) [2850/9234]    eta: 0:02:39  time: 0.0267  data_time: 0.0010  memory: 424  
2024/03/01 14:06:06 - mmengine - INFO - Iter(val) [2900/9234]    eta: 0:02:38  time: 0.0234  data_time: 0.0010  memory: 424  
2024/03/01 14:06:07 - mmengine - INFO - Iter(val) [2950/9234]    eta: 0:02:36  time: 0.0242  data_time: 0.0011  memory: 424  
2024/03/01 14:06:08 - mmengine - INFO - Iter(val) [3000/9234]    eta: 0:02:35  time: 0.0254  data_time: 0.0012  memory: 424  
2024/03/01 14:06:09 - mmengine - INFO - Iter(val) [3050/9234]    eta: 0:02:34  time: 0.0228  data_time: 0.0010  memory: 424  
2024/03/01 14:06:10 - mmengine - INFO - Iter(val) [3100/9234]    eta: 0:02:32  time: 0.0239  data_time: 0.0011  memory: 424  
2024/03/01 14:06:12 - mmengine - INFO - Iter(val) [3150/9234]    eta: 0:02:31  time: 0.0242  data_time: 0.0010  memory: 424  
2024/03/01 14:06:13 - mmengine - INFO - Iter(val) [3200/9234]    eta: 0:02:30  time: 0.0263  data_time: 0.0010  memory: 424  
2024/03/01 14:06:14 - mmengine - INFO - Iter(val) [3250/9234]    eta: 0:02:28  time: 0.0206  data_time: 0.0010  memory: 424  
2024/03/01 14:06:15 - mmengine - INFO - Iter(val) [3300/9234]    eta: 0:02:27  time: 0.0201  data_time: 0.0011  memory: 424  
2024/03/01 14:06:16 - mmengine - INFO - Iter(val) [3350/9234]    eta: 0:02:25  time: 0.0248  data_time: 0.0011  memory: 424  
2024/03/01 14:06:18 - mmengine - INFO - Iter(val) [3400/9234]    eta: 0:02:24  time: 0.0255  data_time: 0.0010  memory: 424  
2024/03/01 14:06:19 - mmengine - INFO - Iter(val) [3450/9234]    eta: 0:02:23  time: 0.0229  data_time: 0.0009  memory: 424  
2024/03/01 14:06:20 - mmengine - INFO - Iter(val) [3500/9234]    eta: 0:02:21  time: 0.0237  data_time: 0.0011  memory: 424  
2024/03/01 14:06:21 - mmengine - INFO - Iter(val) [3550/9234]    eta: 0:02:20  time: 0.0235  data_time: 0.0010  memory: 424  
2024/03/01 14:06:22 - mmengine - INFO - Iter(val) [3600/9234]    eta: 0:02:19  time: 0.0279  data_time: 0.0010  memory: 424  
2024/03/01 14:06:24 - mmengine - INFO - Iter(val) [3650/9234]    eta: 0:02:18  time: 0.0235  data_time: 0.0010  memory: 424  
2024/03/01 14:06:25 - mmengine - INFO - Iter(val) [3700/9234]    eta: 0:02:17  time: 0.0240  data_time: 0.0011  memory: 424  
2024/03/01 14:06:26 - mmengine - INFO - Iter(val) [3750/9234]    eta: 0:02:15  time: 0.0251  data_time: 0.0010  memory: 424  
2024/03/01 14:06:27 - mmengine - INFO - Iter(val) [3800/9234]    eta: 0:02:14  time: 0.0240  data_time: 0.0010  memory: 424  
2024/03/01 14:06:29 - mmengine - INFO - Iter(val) [3850/9234]    eta: 0:02:13  time: 0.0244  data_time: 0.0011  memory: 424  
2024/03/01 14:06:30 - mmengine - INFO - Iter(val) [3900/9234]    eta: 0:02:11  time: 0.0246  data_time: 0.0011  memory: 424  
2024/03/01 14:06:31 - mmengine - INFO - Iter(val) [3950/9234]    eta: 0:02:11  time: 0.0319  data_time: 0.0012  memory: 424  
2024/03/01 14:06:33 - mmengine - INFO - Iter(val) [4000/9234]    eta: 0:02:10  time: 0.0250  data_time: 0.0011  memory: 424  
2024/03/01 14:06:34 - mmengine - INFO - Iter(val) [4050/9234]    eta: 0:02:08  time: 0.0242  data_time: 0.0011  memory: 424  
2024/03/01 14:06:35 - mmengine - INFO - Iter(val) [4100/9234]    eta: 0:02:07  time: 0.0272  data_time: 0.0011  memory: 424  
2024/03/01 14:06:36 - mmengine - INFO - Iter(val) [4150/9234]    eta: 0:02:06  time: 0.0249  data_time: 0.0010  memory: 424  
2024/03/01 14:06:38 - mmengine - INFO - Iter(val) [4200/9234]    eta: 0:02:05  time: 0.0242  data_time: 0.0011  memory: 424  
2024/03/01 14:06:39 - mmengine - INFO - Iter(val) [4250/9234]    eta: 0:02:03  time: 0.0227  data_time: 0.0010  memory: 424  
2024/03/01 14:06:40 - mmengine - INFO - Iter(val) [4300/9234]    eta: 0:02:02  time: 0.0262  data_time: 0.0011  memory: 424  
2024/03/01 14:06:41 - mmengine - INFO - Iter(val) [4350/9234]    eta: 0:02:01  time: 0.0242  data_time: 0.0011  memory: 424  
2024/03/01 14:06:43 - mmengine - INFO - Iter(val) [4400/9234]    eta: 0:02:00  time: 0.0247  data_time: 0.0011  memory: 424  
2024/03/01 14:06:44 - mmengine - INFO - Iter(val) [4450/9234]    eta: 0:01:58  time: 0.0234  data_time: 0.0010  memory: 424  
2024/03/01 14:06:45 - mmengine - INFO - Iter(val) [4500/9234]    eta: 0:01:57  time: 0.0256  data_time: 0.0011  memory: 424  
2024/03/01 14:06:46 - mmengine - INFO - Iter(val) [4550/9234]    eta: 0:01:56  time: 0.0215  data_time: 0.0010  memory: 424  
2024/03/01 14:06:47 - mmengine - INFO - Iter(val) [4600/9234]    eta: 0:01:54  time: 0.0207  data_time: 0.0011  memory: 424  
2024/03/01 14:06:48 - mmengine - INFO - Iter(val) [4650/9234]    eta: 0:01:53  time: 0.0231  data_time: 0.0009  memory: 424  
2024/03/01 14:06:50 - mmengine - INFO - Iter(val) [4700/9234]    eta: 0:01:52  time: 0.0274  data_time: 0.0014  memory: 424  
2024/03/01 14:06:51 - mmengine - INFO - Iter(val) [4750/9234]    eta: 0:01:50  time: 0.0234  data_time: 0.0010  memory: 424  
2024/03/01 14:06:52 - mmengine - INFO - Iter(val) [4800/9234]    eta: 0:01:49  time: 0.0241  data_time: 0.0011  memory: 424  
2024/03/01 14:06:53 - mmengine - INFO - Iter(val) [4850/9234]    eta: 0:01:48  time: 0.0254  data_time: 0.0010  memory: 424  
2024/03/01 14:06:55 - mmengine - INFO - Iter(val) [4900/9234]    eta: 0:01:47  time: 0.0238  data_time: 0.0010  memory: 424  
2024/03/01 14:06:56 - mmengine - INFO - Iter(val) [4950/9234]    eta: 0:01:45  time: 0.0235  data_time: 0.0011  memory: 424  
2024/03/01 14:06:57 - mmengine - INFO - Iter(val) [5000/9234]    eta: 0:01:44  time: 0.0233  data_time: 0.0010  memory: 424  
2024/03/01 14:06:58 - mmengine - INFO - Iter(val) [5050/9234]    eta: 0:01:43  time: 0.0265  data_time: 0.0010  memory: 424  
2024/03/01 14:07:00 - mmengine - INFO - Iter(val) [5100/9234]    eta: 0:01:42  time: 0.0243  data_time: 0.0010  memory: 424  
2024/03/01 14:07:01 - mmengine - INFO - Iter(val) [5150/9234]    eta: 0:01:40  time: 0.0242  data_time: 0.0012  memory: 424  
2024/03/01 14:07:02 - mmengine - INFO - Iter(val) [5200/9234]    eta: 0:01:39  time: 0.0256  data_time: 0.0011  memory: 424  
2024/03/01 14:07:03 - mmengine - INFO - Iter(val) [5250/9234]    eta: 0:01:38  time: 0.0252  data_time: 0.0011  memory: 424  
2024/03/01 14:07:05 - mmengine - INFO - Iter(val) [5300/9234]    eta: 0:01:37  time: 0.0250  data_time: 0.0011  memory: 424  
2024/03/01 14:07:06 - mmengine - INFO - Iter(val) [5350/9234]    eta: 0:01:36  time: 0.0244  data_time: 0.0011  memory: 424  
2024/03/01 14:07:07 - mmengine - INFO - Iter(val) [5400/9234]    eta: 0:01:34  time: 0.0276  data_time: 0.0015  memory: 424  
2024/03/01 14:07:08 - mmengine - INFO - Iter(val) [5450/9234]    eta: 0:01:33  time: 0.0238  data_time: 0.0011  memory: 424  
2024/03/01 14:07:10 - mmengine - INFO - Iter(val) [5500/9234]    eta: 0:01:32  time: 0.0298  data_time: 0.0013  memory: 424  
2024/03/01 14:07:11 - mmengine - INFO - Iter(val) [5550/9234]    eta: 0:01:31  time: 0.0276  data_time: 0.0012  memory: 424  
2024/03/01 14:07:13 - mmengine - INFO - Iter(val) [5600/9234]    eta: 0:01:30  time: 0.0275  data_time: 0.0012  memory: 424  
2024/03/01 14:07:14 - mmengine - INFO - Iter(val) [5650/9234]    eta: 0:01:28  time: 0.0237  data_time: 0.0011  memory: 424  
2024/03/01 14:07:15 - mmengine - INFO - Iter(val) [5700/9234]    eta: 0:01:27  time: 0.0241  data_time: 0.0011  memory: 424  
2024/03/01 14:07:16 - mmengine - INFO - Iter(val) [5750/9234]    eta: 0:01:26  time: 0.0267  data_time: 0.0011  memory: 424  
2024/03/01 14:07:18 - mmengine - INFO - Iter(val) [5800/9234]    eta: 0:01:25  time: 0.0218  data_time: 0.0011  memory: 424  
2024/03/01 14:07:19 - mmengine - INFO - Iter(val) [5850/9234]    eta: 0:01:23  time: 0.0207  data_time: 0.0011  memory: 424  
2024/03/01 14:07:20 - mmengine - INFO - Iter(val) [5900/9234]    eta: 0:01:22  time: 0.0236  data_time: 0.0011  memory: 424  
2024/03/01 14:07:21 - mmengine - INFO - Iter(val) [5950/9234]    eta: 0:01:21  time: 0.0306  data_time: 0.0012  memory: 424  
2024/03/01 14:07:23 - mmengine - INFO - Iter(val) [6000/9234]    eta: 0:01:20  time: 0.0277  data_time: 0.0011  memory: 424  
2024/03/01 14:07:24 - mmengine - INFO - Iter(val) [6050/9234]    eta: 0:01:19  time: 0.0248  data_time: 0.0011  memory: 424  
2024/03/01 14:07:25 - mmengine - INFO - Iter(val) [6100/9234]    eta: 0:01:17  time: 0.0278  data_time: 0.0011  memory: 424  
2024/03/01 14:07:27 - mmengine - INFO - Iter(val) [6150/9234]    eta: 0:01:16  time: 0.0238  data_time: 0.0010  memory: 424  
2024/03/01 14:07:28 - mmengine - INFO - Iter(val) [6200/9234]    eta: 0:01:15  time: 0.0252  data_time: 0.0012  memory: 424  
2024/03/01 14:07:29 - mmengine - INFO - Iter(val) [6250/9234]    eta: 0:01:14  time: 0.0269  data_time: 0.0011  memory: 424  
2024/03/01 14:07:30 - mmengine - INFO - Iter(val) [6300/9234]    eta: 0:01:12  time: 0.0236  data_time: 0.0010  memory: 424  
2024/03/01 14:07:32 - mmengine - INFO - Iter(val) [6350/9234]    eta: 0:01:11  time: 0.0242  data_time: 0.0011  memory: 424  
2024/03/01 14:07:33 - mmengine - INFO - Iter(val) [6400/9234]    eta: 0:01:10  time: 0.0235  data_time: 0.0010  memory: 424  
2024/03/01 14:07:34 - mmengine - INFO - Iter(val) [6450/9234]    eta: 0:01:09  time: 0.0282  data_time: 0.0011  memory: 424  
2024/03/01 14:07:36 - mmengine - INFO - Iter(val) [6500/9234]    eta: 0:01:08  time: 0.0262  data_time: 0.0013  memory: 424  
2024/03/01 14:07:37 - mmengine - INFO - Iter(val) [6550/9234]    eta: 0:01:06  time: 0.0253  data_time: 0.0011  memory: 424  
2024/03/01 14:07:38 - mmengine - INFO - Iter(val) [6600/9234]    eta: 0:01:05  time: 0.0219  data_time: 0.0010  memory: 424  
2024/03/01 14:07:39 - mmengine - INFO - Iter(val) [6650/9234]    eta: 0:01:04  time: 0.0272  data_time: 0.0011  memory: 424  
2024/03/01 14:07:41 - mmengine - INFO - Iter(val) [6700/9234]    eta: 0:01:03  time: 0.0245  data_time: 0.0011  memory: 424  
2024/03/01 14:07:42 - mmengine - INFO - Iter(val) [6750/9234]    eta: 0:01:01  time: 0.0243  data_time: 0.0011  memory: 424  
2024/03/01 14:07:43 - mmengine - INFO - Iter(val) [6800/9234]    eta: 0:01:00  time: 0.0270  data_time: 0.0011  memory: 424  
2024/03/01 14:07:44 - mmengine - INFO - Iter(val) [6850/9234]    eta: 0:00:59  time: 0.0267  data_time: 0.0011  memory: 424  
2024/03/01 14:07:46 - mmengine - INFO - Iter(val) [6900/9234]    eta: 0:00:58  time: 0.0253  data_time: 0.0011  memory: 424  
2024/03/01 14:07:47 - mmengine - INFO - Iter(val) [6950/9234]    eta: 0:00:56  time: 0.0267  data_time: 0.0011  memory: 424  
2024/03/01 14:07:48 - mmengine - INFO - Iter(val) [7000/9234]    eta: 0:00:55  time: 0.0257  data_time: 0.0011  memory: 424  
2024/03/01 14:07:50 - mmengine - INFO - Iter(val) [7050/9234]    eta: 0:00:54  time: 0.0218  data_time: 0.0011  memory: 424  
2024/03/01 14:07:51 - mmengine - INFO - Iter(val) [7100/9234]    eta: 0:00:53  time: 0.0211  data_time: 0.0010  memory: 424  
2024/03/01 14:07:52 - mmengine - INFO - Iter(val) [7150/9234]    eta: 0:00:51  time: 0.0268  data_time: 0.0011  memory: 424  
2024/03/01 14:07:53 - mmengine - INFO - Iter(val) [7200/9234]    eta: 0:00:50  time: 0.0241  data_time: 0.0011  memory: 424  
2024/03/01 14:07:54 - mmengine - INFO - Iter(val) [7250/9234]    eta: 0:00:49  time: 0.0245  data_time: 0.0011  memory: 424  
2024/03/01 14:07:56 - mmengine - INFO - Iter(val) [7300/9234]    eta: 0:00:48  time: 0.0244  data_time: 0.0010  memory: 424  
2024/03/01 14:07:57 - mmengine - INFO - Iter(val) [7350/9234]    eta: 0:00:46  time: 0.0272  data_time: 0.0011  memory: 424  
2024/03/01 14:07:58 - mmengine - INFO - Iter(val) [7400/9234]    eta: 0:00:45  time: 0.0248  data_time: 0.0011  memory: 424  
2024/03/01 14:07:59 - mmengine - INFO - Iter(val) [7450/9234]    eta: 0:00:44  time: 0.0249  data_time: 0.0011  memory: 424  
2024/03/01 14:08:01 - mmengine - INFO - Iter(val) [7500/9234]    eta: 0:00:43  time: 0.0261  data_time: 0.0011  memory: 424  
2024/03/01 14:08:02 - mmengine - INFO - Iter(val) [7550/9234]    eta: 0:00:41  time: 0.0248  data_time: 0.0011  memory: 424  
2024/03/01 14:08:03 - mmengine - INFO - Iter(val) [7600/9234]    eta: 0:00:40  time: 0.0251  data_time: 0.0014  memory: 424  
2024/03/01 14:08:05 - mmengine - INFO - Iter(val) [7650/9234]    eta: 0:00:39  time: 0.0241  data_time: 0.0011  memory: 424  
2024/03/01 14:08:06 - mmengine - INFO - Iter(val) [7700/9234]    eta: 0:00:38  time: 0.0271  data_time: 0.0011  memory: 424  
2024/03/01 14:08:07 - mmengine - INFO - Iter(val) [7750/9234]    eta: 0:00:36  time: 0.0249  data_time: 0.0011  memory: 424  
2024/03/01 14:08:08 - mmengine - INFO - Iter(val) [7800/9234]    eta: 0:00:35  time: 0.0256  data_time: 0.0012  memory: 424  
2024/03/01 14:08:10 - mmengine - INFO - Iter(val) [7850/9234]    eta: 0:00:34  time: 0.0275  data_time: 0.0012  memory: 424  
2024/03/01 14:08:11 - mmengine - INFO - Iter(val) [7900/9234]    eta: 0:00:33  time: 0.0245  data_time: 0.0011  memory: 424  
2024/03/01 14:08:12 - mmengine - INFO - Iter(val) [7950/9234]    eta: 0:00:32  time: 0.0252  data_time: 0.0011  memory: 424  
2024/03/01 14:08:14 - mmengine - INFO - Iter(val) [8000/9234]    eta: 0:00:30  time: 0.0256  data_time: 0.0010  memory: 424  
2024/03/01 14:08:15 - mmengine - INFO - Iter(val) [8050/9234]    eta: 0:00:29  time: 0.0272  data_time: 0.0011  memory: 424  
2024/03/01 14:08:16 - mmengine - INFO - Iter(val) [8100/9234]    eta: 0:00:28  time: 0.0239  data_time: 0.0011  memory: 424  
2024/03/01 14:08:17 - mmengine - INFO - Iter(val) [8150/9234]    eta: 0:00:27  time: 0.0250  data_time: 0.0011  memory: 424  
2024/03/01 14:08:19 - mmengine - INFO - Iter(val) [8200/9234]    eta: 0:00:25  time: 0.0259  data_time: 0.0010  memory: 424  
2024/03/01 14:08:20 - mmengine - INFO - Iter(val) [8250/9234]    eta: 0:00:24  time: 0.0248  data_time: 0.0010  memory: 424  
2024/03/01 14:08:21 - mmengine - INFO - Iter(val) [8300/9234]    eta: 0:00:23  time: 0.0211  data_time: 0.0011  memory: 424  
2024/03/01 14:08:22 - mmengine - INFO - Iter(val) [8350/9234]    eta: 0:00:22  time: 0.0205  data_time: 0.0010  memory: 424  
2024/03/01 14:08:23 - mmengine - INFO - Iter(val) [8400/9234]    eta: 0:00:20  time: 0.0253  data_time: 0.0011  memory: 424  
2024/03/01 14:08:25 - mmengine - INFO - Iter(val) [8450/9234]    eta: 0:00:19  time: 0.0233  data_time: 0.0010  memory: 424  
2024/03/01 14:08:26 - mmengine - INFO - Iter(val) [8500/9234]    eta: 0:00:18  time: 0.0248  data_time: 0.0011  memory: 424  
2024/03/01 14:08:27 - mmengine - INFO - Iter(val) [8550/9234]    eta: 0:00:17  time: 0.0244  data_time: 0.0011  memory: 424  
2024/03/01 14:08:28 - mmengine - INFO - Iter(val) [8600/9234]    eta: 0:00:15  time: 0.0269  data_time: 0.0011  memory: 424  
2024/03/01 14:08:30 - mmengine - INFO - Iter(val) [8650/9234]    eta: 0:00:14  time: 0.0235  data_time: 0.0011  memory: 424  
2024/03/01 14:08:31 - mmengine - INFO - Iter(val) [8700/9234]    eta: 0:00:13  time: 0.0246  data_time: 0.0010  memory: 424  
2024/03/01 14:08:32 - mmengine - INFO - Iter(val) [8750/9234]    eta: 0:00:12  time: 0.0286  data_time: 0.0011  memory: 424  
2024/03/01 14:08:34 - mmengine - INFO - Iter(val) [8800/9234]    eta: 0:00:10  time: 0.0248  data_time: 0.0011  memory: 424  
2024/03/01 14:08:35 - mmengine - INFO - Iter(val) [8850/9234]    eta: 0:00:09  time: 0.0255  data_time: 0.0011  memory: 424  
2024/03/01 14:08:36 - mmengine - INFO - Iter(val) [8900/9234]    eta: 0:00:08  time: 0.0247  data_time: 0.0011  memory: 424  
2024/03/01 14:08:37 - mmengine - INFO - Iter(val) [8950/9234]    eta: 0:00:07  time: 0.0275  data_time: 0.0011  memory: 424  
2024/03/01 14:08:39 - mmengine - INFO - Iter(val) [9000/9234]    eta: 0:00:05  time: 0.0267  data_time: 0.0012  memory: 424  
2024/03/01 14:08:40 - mmengine - INFO - Iter(val) [9050/9234]    eta: 0:00:04  time: 0.0278  data_time: 0.0015  memory: 424  
2024/03/01 14:08:42 - mmengine - INFO - Iter(val) [9100/9234]    eta: 0:00:03  time: 0.0268  data_time: 0.0011  memory: 424  
2024/03/01 14:08:43 - mmengine - INFO - Iter(val) [9150/9234]    eta: 0:00:02  time: 0.0252  data_time: 0.0010  memory: 424  
2024/03/01 14:08:44 - mmengine - INFO - Iter(val) [9200/9234]    eta: 0:00:00  time: 0.0246  data_time: 0.0011  memory: 424  
2024/03/01 14:11:24 - mmengine - INFO - Iter(val) [9234/9234]    reid-metric/mAP: 0.3440  reid-metric/R1: 0.9060  reid-metric/R5: 0.9660  reid-metric/R10: 0.9800  reid-metric/R20: 0.9870  data_time: 0.0011  time: 0.0250
2024/03/01 14:11:24 - mmengine - INFO - The best checkpoint with 0.3440 reid-metric/mAP at 1000 iter is saved to best_reid-metric_mAP_iter_1000.pth.
2024/03/01 14:11:44 - mmengine - INFO - Iter(train) [  1050/140000]  lr: 1.0000e-02  eta: 21:22:35  time: 3.5833  data_time: 3.1986  memory: 7197  loss: 3.7106  triplet_loss: 0.6339  ce_loss: 3.0767  accuracy_top-1: 21.8750
2024/03/01 14:12:05 - mmengine - INFO - Iter(train) [  1100/140000]  lr: 1.0000e-02  eta: 21:06:57  time: 0.4097  data_time: 0.0098  memory: 7197  loss: 3.7539  triplet_loss: 0.7477  ce_loss: 3.0063  accuracy_top-1: 18.7500
2024/03/01 14:12:23 - mmengine - INFO - Iter(train) [  1150/140000]  lr: 1.0000e-02  eta: 20:48:56  time: 0.3728  data_time: 0.0093  memory: 7197  loss: 3.7954  triplet_loss: 0.7525  ce_loss: 3.0429  accuracy_top-1: 21.8750
2024/03/01 14:12:44 - mmengine - INFO - Iter(train) [  1200/140000]  lr: 1.0000e-02  eta: 20:36:13  time: 0.4123  data_time: 0.0094  memory: 7197  loss: 3.5218  triplet_loss: 0.6535  ce_loss: 2.8683  accuracy_top-1: 28.1250
2024/03/01 14:13:03 - mmengine - INFO - Iter(train) [  1250/140000]  lr: 1.0000e-02  eta: 20:21:19  time: 0.3782  data_time: 0.0090  memory: 7197  loss: 3.5963  triplet_loss: 0.7205  ce_loss: 2.8757  accuracy_top-1: 26.5625
2024/03/01 14:13:24 - mmengine - INFO - Iter(train) [  1300/140000]  lr: 1.0000e-02  eta: 20:11:03  time: 0.4176  data_time: 0.0082  memory: 7197  loss: 3.2427  triplet_loss: 0.5838  ce_loss: 2.6590  accuracy_top-1: 25.0000
2024/03/01 14:13:42 - mmengine - INFO - Iter(train) [  1350/140000]  lr: 1.0000e-02  eta: 19:58:00  time: 0.3766  data_time: 0.0087  memory: 7197  loss: 3.3034  triplet_loss: 0.6687  ce_loss: 2.6348  accuracy_top-1: 20.3125
2024/03/01 14:14:03 - mmengine - INFO - Iter(train) [  1400/140000]  lr: 1.0000e-02  eta: 19:48:56  time: 0.4138  data_time: 0.0097  memory: 7197  loss: 3.0759  triplet_loss: 0.5953  ce_loss: 2.4807  accuracy_top-1: 53.1250
2024/03/01 14:14:18 - mmengine - INFO - Iter(train) [  1450/140000]  lr: 1.0000e-02  eta: 19:31:21  time: 0.2992  data_time: 0.0089  memory: 7197  loss: 3.0151  triplet_loss: 0.5947  ce_loss: 2.4204  accuracy_top-1: 37.5000
2024/03/01 14:14:29 - mmengine - INFO - Iter(train) [  1500/140000]  lr: 1.0000e-02  eta: 19:08:35  time: 0.2169  data_time: 0.0085  memory: 7197  loss: 2.7477  triplet_loss: 0.5316  ce_loss: 2.2161  accuracy_top-1: 28.1250
2024/03/01 14:14:40 - mmengine - INFO - Iter(train) [  1550/140000]  lr: 1.0000e-02  eta: 18:46:59  time: 0.2129  data_time: 0.0084  memory: 7197  loss: 2.6467  triplet_loss: 0.5170  ce_loss: 2.1298  accuracy_top-1: 51.5625
2024/03/01 14:14:50 - mmengine - INFO - Iter(train) [  1600/140000]  lr: 1.0000e-02  eta: 18:26:50  time: 0.2145  data_time: 0.0083  memory: 7197  loss: 2.7931  triplet_loss: 0.5794  ce_loss: 2.2137  accuracy_top-1: 29.6875
2024/03/01 14:15:01 - mmengine - INFO - Iter(train) [  1650/140000]  lr: 1.0000e-02  eta: 18:07:43  time: 0.2120  data_time: 0.0086  memory: 7197  loss: 2.6588  triplet_loss: 0.5627  ce_loss: 2.0962  accuracy_top-1: 29.6875
2024/03/01 14:15:17 - mmengine - INFO - Iter(train) [  1700/140000]  lr: 1.0000e-02  eta: 17:57:24  time: 0.3252  data_time: 0.0088  memory: 7197  loss: 2.5323  triplet_loss: 0.5349  ce_loss: 1.9974  accuracy_top-1: 48.4375
2024/03/01 14:15:28 - mmengine - INFO - Iter(train) [  1750/140000]  lr: 1.0000e-02  eta: 17:40:12  time: 0.2121  data_time: 0.0082  memory: 7197  loss: 2.5270  triplet_loss: 0.4980  ce_loss: 2.0290  accuracy_top-1: 43.7500
2024/03/01 14:15:38 - mmengine - INFO - Iter(train) [  1800/140000]  lr: 1.0000e-02  eta: 17:23:56  time: 0.2120  data_time: 0.0086  memory: 7197  loss: 2.4114  triplet_loss: 0.4874  ce_loss: 1.9240  accuracy_top-1: 51.5625
2024/03/01 14:15:49 - mmengine - INFO - Iter(train) [  1850/140000]  lr: 1.0000e-02  eta: 17:08:40  time: 0.2139  data_time: 0.0087  memory: 7197  loss: 2.1736  triplet_loss: 0.3742  ce_loss: 1.7994  accuracy_top-1: 57.8125
2024/03/01 14:16:00 - mmengine - INFO - Iter(train) [  1900/140000]  lr: 1.0000e-02  eta: 16:54:07  time: 0.2126  data_time: 0.0084  memory: 7197  loss: 2.1096  triplet_loss: 0.4116  ce_loss: 1.6981  accuracy_top-1: 64.0625
2024/03/01 14:16:16 - mmengine - INFO - Iter(train) [  1950/140000]  lr: 1.0000e-02  eta: 16:47:03  time: 0.3271  data_time: 0.0085  memory: 7197  loss: 2.0279  triplet_loss: 0.3979  ce_loss: 1.6301  accuracy_top-1: 42.1875
2024/03/01 14:16:27 - mmengine - INFO - Exp name: reid_testmodel_20240301_135802
2024/03/01 14:16:27 - mmengine - INFO - Iter(train) [  2000/140000]  lr: 1.0000e-02  eta: 16:33:43  time: 0.2123  data_time: 0.0081  memory: 7197  loss: 2.0922  triplet_loss: 0.4455  ce_loss: 1.6467  accuracy_top-1: 70.3125
2024/03/01 14:16:27 - mmengine - INFO - Saving checkpoint at 2000 iterations
2024/03/01 14:16:29 - mmengine - INFO - Iter(val) [  50/9234]    eta: 0:04:32  time: 0.0297  data_time: 0.0013  memory: 424  
2024/03/01 14:16:31 - mmengine - INFO - Iter(val) [ 100/9234]    eta: 0:04:24  time: 0.0281  data_time: 0.0014  memory: 424  
2024/03/01 14:16:32 - mmengine - INFO - Iter(val) [ 150/9234]    eta: 0:04:25  time: 0.0298  data_time: 0.0013  memory: 424  
2024/03/01 14:16:34 - mmengine - INFO - Iter(val) [ 200/9234]    eta: 0:04:26  time: 0.0301  data_time: 0.0013  memory: 424  
2024/03/01 14:16:35 - mmengine - INFO - Iter(val) [ 250/9234]    eta: 0:04:24  time: 0.0297  data_time: 0.0013  memory: 424  
2024/03/01 14:16:37 - mmengine - INFO - Iter(val) [ 300/9234]    eta: 0:04:22  time: 0.0289  data_time: 0.0013  memory: 424  
2024/03/01 14:16:38 - mmengine - INFO - Iter(val) [ 350/9234]    eta: 0:04:21  time: 0.0296  data_time: 0.0013  memory: 424  
2024/03/01 14:16:40 - mmengine - INFO - Iter(val) [ 400/9234]    eta: 0:04:18  time: 0.0278  data_time: 0.0012  memory: 424  
2024/03/01 14:16:41 - mmengine - INFO - Iter(val) [ 450/9234]    eta: 0:04:16  time: 0.0290  data_time: 0.0012  memory: 424  
2024/03/01 14:16:43 - mmengine - INFO - Iter(val) [ 500/9234]    eta: 0:04:16  time: 0.0313  data_time: 0.0013  memory: 424  
2024/03/01 14:16:44 - mmengine - INFO - Iter(val) [ 550/9234]    eta: 0:04:15  time: 0.0301  data_time: 0.0012  memory: 424  
2024/03/01 14:16:46 - mmengine - INFO - Iter(val) [ 600/9234]    eta: 0:04:15  time: 0.0308  data_time: 0.0013  memory: 424  
2024/03/01 14:16:47 - mmengine - INFO - Iter(val) [ 650/9234]    eta: 0:04:14  time: 0.0301  data_time: 0.0013  memory: 424  
2024/03/01 14:16:49 - mmengine - INFO - Iter(val) [ 700/9234]    eta: 0:04:13  time: 0.0301  data_time: 0.0013  memory: 424  
2024/03/01 14:16:50 - mmengine - INFO - Iter(val) [ 750/9234]    eta: 0:04:11  time: 0.0291  data_time: 0.0013  memory: 424  
2024/03/01 14:16:52 - mmengine - INFO - Iter(val) [ 800/9234]    eta: 0:04:10  time: 0.0304  data_time: 0.0016  memory: 424  
2024/03/01 14:16:53 - mmengine - INFO - Iter(val) [ 850/9234]    eta: 0:04:08  time: 0.0300  data_time: 0.0013  memory: 424  
2024/03/01 14:16:55 - mmengine - INFO - Iter(val) [ 900/9234]    eta: 0:04:07  time: 0.0306  data_time: 0.0015  memory: 424  
2024/03/01 14:16:56 - mmengine - INFO - Iter(val) [ 950/9234]    eta: 0:04:05  time: 0.0288  data_time: 0.0013  memory: 424  
2024/03/01 14:16:58 - mmengine - INFO - Iter(val) [1000/9234]    eta: 0:04:04  time: 0.0298  data_time: 0.0013  memory: 424  
2024/03/01 14:16:59 - mmengine - INFO - Iter(val) [1050/9234]    eta: 0:04:02  time: 0.0287  data_time: 0.0013  memory: 424  
2024/03/01 14:17:01 - mmengine - INFO - Iter(val) [1100/9234]    eta: 0:04:01  time: 0.0301  data_time: 0.0013  memory: 424  
2024/03/01 14:17:02 - mmengine - INFO - Iter(val) [1150/9234]    eta: 0:03:59  time: 0.0288  data_time: 0.0012  memory: 424  
2024/03/01 14:17:04 - mmengine - INFO - Iter(val) [1200/9234]    eta: 0:04:00  time: 0.0370  data_time: 0.0015  memory: 424  
2024/03/01 14:17:06 - mmengine - INFO - Iter(val) [1250/9234]    eta: 0:04:00  time: 0.0346  data_time: 0.0012  memory: 424  
2024/03/01 14:17:07 - mmengine - INFO - Iter(val) [1300/9234]    eta: 0:03:59  time: 0.0332  data_time: 0.0012  memory: 424  
2024/03/01 14:17:09 - mmengine - INFO - Iter(val) [1350/9234]    eta: 0:03:56  time: 0.0245  data_time: 0.0011  memory: 424  
2024/03/01 14:17:10 - mmengine - INFO - Iter(val) [1400/9234]    eta: 0:03:53  time: 0.0249  data_time: 0.0012  memory: 424  
2024/03/01 14:17:11 - mmengine - INFO - Iter(val) [1450/9234]    eta: 0:03:51  time: 0.0261  data_time: 0.0012  memory: 424  
2024/03/01 14:17:12 - mmengine - INFO - Iter(val) [1500/9234]    eta: 0:03:48  time: 0.0263  data_time: 0.0013  memory: 424  
2024/03/01 14:17:14 - mmengine - INFO - Iter(val) [1550/9234]    eta: 0:03:45  time: 0.0231  data_time: 0.0013  memory: 424  
2024/03/01 14:17:15 - mmengine - INFO - Iter(val) [1600/9234]    eta: 0:03:42  time: 0.0210  data_time: 0.0012  memory: 424  
2024/03/01 14:17:16 - mmengine - INFO - Iter(val) [1650/9234]    eta: 0:03:39  time: 0.0223  data_time: 0.0011  memory: 424  
2024/03/01 14:17:17 - mmengine - INFO - Iter(val) [1700/9234]    eta: 0:03:35  time: 0.0183  data_time: 0.0010  memory: 424  
2024/03/01 14:17:18 - mmengine - INFO - Iter(val) [1750/9234]    eta: 0:03:32  time: 0.0187  data_time: 0.0011  memory: 424  
2024/03/01 14:17:19 - mmengine - INFO - Iter(val) [1800/9234]    eta: 0:03:28  time: 0.0191  data_time: 0.0011  memory: 424  
2024/03/01 14:17:20 - mmengine - INFO - Iter(val) [1850/9234]    eta: 0:03:25  time: 0.0180  data_time: 0.0010  memory: 424  
2024/03/01 14:17:21 - mmengine - INFO - Iter(val) [1900/9234]    eta: 0:03:22  time: 0.0208  data_time: 0.0010  memory: 424  
2024/03/01 14:17:21 - mmengine - INFO - Iter(val) [1950/9234]    eta: 0:03:19  time: 0.0182  data_time: 0.0010  memory: 424  
2024/03/01 14:17:22 - mmengine - INFO - Iter(val) [2000/9234]    eta: 0:03:16  time: 0.0187  data_time: 0.0011  memory: 424  
2024/03/01 14:17:23 - mmengine - INFO - Iter(val) [2050/9234]    eta: 0:03:13  time: 0.0208  data_time: 0.0011  memory: 424  
2024/03/01 14:17:25 - mmengine - INFO - Iter(val) [2100/9234]    eta: 0:03:12  time: 0.0237  data_time: 0.0010  memory: 424  
2024/03/01 14:17:26 - mmengine - INFO - Iter(val) [2150/9234]    eta: 0:03:09  time: 0.0184  data_time: 0.0010  memory: 424  
2024/03/01 14:17:27 - mmengine - INFO - Iter(val) [2200/9234]    eta: 0:03:06  time: 0.0188  data_time: 0.0010  memory: 424  
2024/03/01 14:17:27 - mmengine - INFO - Iter(val) [2250/9234]    eta: 0:03:04  time: 0.0188  data_time: 0.0010  memory: 424  
2024/03/01 14:17:28 - mmengine - INFO - Iter(val) [2300/9234]    eta: 0:03:01  time: 0.0172  data_time: 0.0008  memory: 424  
2024/03/01 14:17:29 - mmengine - INFO - Iter(val) [2350/9234]    eta: 0:02:59  time: 0.0201  data_time: 0.0009  memory: 424  
2024/03/01 14:17:30 - mmengine - INFO - Iter(val) [2400/9234]    eta: 0:02:56  time: 0.0171  data_time: 0.0008  memory: 424  
2024/03/01 14:17:31 - mmengine - INFO - Iter(val) [2450/9234]    eta: 0:02:54  time: 0.0188  data_time: 0.0011  memory: 424  
2024/03/01 14:17:32 - mmengine - INFO - Iter(val) [2500/9234]    eta: 0:02:52  time: 0.0181  data_time: 0.0010  memory: 424  
2024/03/01 14:17:33 - mmengine - INFO - Iter(val) [2550/9234]    eta: 0:02:50  time: 0.0200  data_time: 0.0011  memory: 424  
2024/03/01 14:17:34 - mmengine - INFO - Iter(val) [2600/9234]    eta: 0:02:47  time: 0.0186  data_time: 0.0009  memory: 424  
2024/03/01 14:17:35 - mmengine - INFO - Iter(val) [2650/9234]    eta: 0:02:45  time: 0.0181  data_time: 0.0010  memory: 424  
2024/03/01 14:17:36 - mmengine - INFO - Iter(val) [2700/9234]    eta: 0:02:43  time: 0.0191  data_time: 0.0011  memory: 424  
2024/03/01 14:17:37 - mmengine - INFO - Iter(val) [2750/9234]    eta: 0:02:41  time: 0.0177  data_time: 0.0009  memory: 424  
2024/03/01 14:17:38 - mmengine - INFO - Iter(val) [2800/9234]    eta: 0:02:39  time: 0.0204  data_time: 0.0009  memory: 424  
2024/03/01 14:17:39 - mmengine - INFO - Iter(val) [2850/9234]    eta: 0:02:37  time: 0.0174  data_time: 0.0008  memory: 424  
2024/03/01 14:17:40 - mmengine - INFO - Iter(val) [2900/9234]    eta: 0:02:35  time: 0.0188  data_time: 0.0010  memory: 424  
2024/03/01 14:17:41 - mmengine - INFO - Iter(val) [2950/9234]    eta: 0:02:34  time: 0.0188  data_time: 0.0010  memory: 424  
2024/03/01 14:17:41 - mmengine - INFO - Iter(val) [3000/9234]    eta: 0:02:32  time: 0.0176  data_time: 0.0008  memory: 424  
2024/03/01 14:17:42 - mmengine - INFO - Iter(val) [3050/9234]    eta: 0:02:30  time: 0.0204  data_time: 0.0012  memory: 424  
2024/03/01 14:17:43 - mmengine - INFO - Iter(val) [3100/9234]    eta: 0:02:28  time: 0.0174  data_time: 0.0009  memory: 424  
2024/03/01 14:17:44 - mmengine - INFO - Iter(val) [3150/9234]    eta: 0:02:26  time: 0.0190  data_time: 0.0011  memory: 424  
2024/03/01 14:17:45 - mmengine - INFO - Iter(val) [3200/9234]    eta: 0:02:25  time: 0.0182  data_time: 0.0009  memory: 424  
2024/03/01 14:17:46 - mmengine - INFO - Iter(val) [3250/9234]    eta: 0:02:23  time: 0.0207  data_time: 0.0009  memory: 424  
2024/03/01 14:17:47 - mmengine - INFO - Iter(val) [3300/9234]    eta: 0:02:21  time: 0.0174  data_time: 0.0009  memory: 424  
2024/03/01 14:17:48 - mmengine - INFO - Iter(val) [3350/9234]    eta: 0:02:20  time: 0.0177  data_time: 0.0009  memory: 424  
2024/03/01 14:17:49 - mmengine - INFO - Iter(val) [3400/9234]    eta: 0:02:18  time: 0.0190  data_time: 0.0010  memory: 424  
2024/03/01 14:17:50 - mmengine - INFO - Iter(val) [3450/9234]    eta: 0:02:16  time: 0.0184  data_time: 0.0008  memory: 424  
2024/03/01 14:17:51 - mmengine - INFO - Iter(val) [3500/9234]    eta: 0:02:15  time: 0.0202  data_time: 0.0009  memory: 424  
2024/03/01 14:17:52 - mmengine - INFO - Iter(val) [3550/9234]    eta: 0:02:13  time: 0.0173  data_time: 0.0008  memory: 424  
2024/03/01 14:17:53 - mmengine - INFO - Iter(val) [3600/9234]    eta: 0:02:12  time: 0.0186  data_time: 0.0010  memory: 424  
2024/03/01 14:17:54 - mmengine - INFO - Iter(val) [3650/9234]    eta: 0:02:10  time: 0.0184  data_time: 0.0010  memory: 424  
2024/03/01 14:17:55 - mmengine - INFO - Iter(val) [3700/9234]    eta: 0:02:08  time: 0.0172  data_time: 0.0008  memory: 424  
2024/03/01 14:17:56 - mmengine - INFO - Iter(val) [3750/9234]    eta: 0:02:07  time: 0.0211  data_time: 0.0011  memory: 424  
2024/03/01 14:17:57 - mmengine - INFO - Iter(val) [3800/9234]    eta: 0:02:06  time: 0.0176  data_time: 0.0009  memory: 424  
2024/03/01 14:17:57 - mmengine - INFO - Iter(val) [3850/9234]    eta: 0:02:04  time: 0.0189  data_time: 0.0011  memory: 424  
2024/03/01 14:17:58 - mmengine - INFO - Iter(val) [3900/9234]    eta: 0:02:03  time: 0.0180  data_time: 0.0009  memory: 424  
2024/03/01 14:17:59 - mmengine - INFO - Iter(val) [3950/9234]    eta: 0:02:01  time: 0.0209  data_time: 0.0009  memory: 424  
2024/03/01 14:18:00 - mmengine - INFO - Iter(val) [4000/9234]    eta: 0:02:00  time: 0.0173  data_time: 0.0009  memory: 424  
2024/03/01 14:18:01 - mmengine - INFO - Iter(val) [4050/9234]    eta: 0:01:58  time: 0.0179  data_time: 0.0009  memory: 424  
2024/03/01 14:18:02 - mmengine - INFO - Iter(val) [4100/9234]    eta: 0:01:57  time: 0.0196  data_time: 0.0011  memory: 424  
2024/03/01 14:18:03 - mmengine - INFO - Iter(val) [4150/9234]    eta: 0:01:56  time: 0.0226  data_time: 0.0009  memory: 424  
2024/03/01 14:18:05 - mmengine - INFO - Iter(val) [4200/9234]    eta: 0:01:55  time: 0.0235  data_time: 0.0010  memory: 424  
2024/03/01 14:18:05 - mmengine - INFO - Iter(val) [4250/9234]    eta: 0:01:53  time: 0.0183  data_time: 0.0009  memory: 424  
2024/03/01 14:18:06 - mmengine - INFO - Iter(val) [4300/9234]    eta: 0:01:52  time: 0.0208  data_time: 0.0011  memory: 424  
2024/03/01 14:18:08 - mmengine - INFO - Iter(val) [4350/9234]    eta: 0:01:51  time: 0.0230  data_time: 0.0010  memory: 424  
2024/03/01 14:18:09 - mmengine - INFO - Iter(val) [4400/9234]    eta: 0:01:50  time: 0.0262  data_time: 0.0009  memory: 424  
2024/03/01 14:18:10 - mmengine - INFO - Iter(val) [4450/9234]    eta: 0:01:49  time: 0.0222  data_time: 0.0009  memory: 424  
2024/03/01 14:18:11 - mmengine - INFO - Iter(val) [4500/9234]    eta: 0:01:47  time: 0.0186  data_time: 0.0010  memory: 424  
2024/03/01 14:18:12 - mmengine - INFO - Iter(val) [4550/9234]    eta: 0:01:46  time: 0.0172  data_time: 0.0009  memory: 424  
2024/03/01 14:18:13 - mmengine - INFO - Iter(val) [4600/9234]    eta: 0:01:45  time: 0.0212  data_time: 0.0010  memory: 424  
2024/03/01 14:18:14 - mmengine - INFO - Iter(val) [4650/9234]    eta: 0:01:43  time: 0.0176  data_time: 0.0009  memory: 424  
2024/03/01 14:18:15 - mmengine - INFO - Iter(val) [4700/9234]    eta: 0:01:42  time: 0.0190  data_time: 0.0011  memory: 424  
2024/03/01 14:18:16 - mmengine - INFO - Iter(val) [4750/9234]    eta: 0:01:41  time: 0.0185  data_time: 0.0010  memory: 424  
2024/03/01 14:18:17 - mmengine - INFO - Iter(val) [4800/9234]    eta: 0:01:40  time: 0.0213  data_time: 0.0009  memory: 424  
2024/03/01 14:18:18 - mmengine - INFO - Iter(val) [4850/9234]    eta: 0:01:38  time: 0.0178  data_time: 0.0009  memory: 424  
2024/03/01 14:18:19 - mmengine - INFO - Iter(val) [4900/9234]    eta: 0:01:37  time: 0.0179  data_time: 0.0009  memory: 424  
2024/03/01 14:18:20 - mmengine - INFO - Iter(val) [4950/9234]    eta: 0:01:36  time: 0.0185  data_time: 0.0010  memory: 424  
2024/03/01 14:18:20 - mmengine - INFO - Iter(val) [5000/9234]    eta: 0:01:34  time: 0.0165  data_time: 0.0008  memory: 424  
2024/03/01 14:18:21 - mmengine - INFO - Iter(val) [5050/9234]    eta: 0:01:33  time: 0.0191  data_time: 0.0008  memory: 424  
2024/03/01 14:18:22 - mmengine - INFO - Iter(val) [5100/9234]    eta: 0:01:32  time: 0.0178  data_time: 0.0009  memory: 424  
2024/03/01 14:18:23 - mmengine - INFO - Iter(val) [5150/9234]    eta: 0:01:30  time: 0.0187  data_time: 0.0010  memory: 424  
2024/03/01 14:18:24 - mmengine - INFO - Iter(val) [5200/9234]    eta: 0:01:29  time: 0.0193  data_time: 0.0011  memory: 424  
2024/03/01 14:18:25 - mmengine - INFO - Iter(val) [5250/9234]    eta: 0:01:28  time: 0.0175  data_time: 0.0008  memory: 424  
2024/03/01 14:18:26 - mmengine - INFO - Iter(val) [5300/9234]    eta: 0:01:27  time: 0.0211  data_time: 0.0010  memory: 424  
2024/03/01 14:18:27 - mmengine - INFO - Iter(val) [5350/9234]    eta: 0:01:25  time: 0.0174  data_time: 0.0009  memory: 424  
2024/03/01 14:18:28 - mmengine - INFO - Iter(val) [5400/9234]    eta: 0:01:24  time: 0.0191  data_time: 0.0011  memory: 424  
2024/03/01 14:18:29 - mmengine - INFO - Iter(val) [5450/9234]    eta: 0:01:23  time: 0.0185  data_time: 0.0010  memory: 424  
2024/03/01 14:18:30 - mmengine - INFO - Iter(val) [5500/9234]    eta: 0:01:22  time: 0.0191  data_time: 0.0009  memory: 424  
2024/03/01 14:18:31 - mmengine - INFO - Iter(val) [5550/9234]    eta: 0:01:21  time: 0.0199  data_time: 0.0009  memory: 424  
2024/03/01 14:18:32 - mmengine - INFO - Iter(val) [5600/9234]    eta: 0:01:19  time: 0.0182  data_time: 0.0009  memory: 424  
2024/03/01 14:18:33 - mmengine - INFO - Iter(val) [5650/9234]    eta: 0:01:18  time: 0.0196  data_time: 0.0011  memory: 424  
2024/03/01 14:18:34 - mmengine - INFO - Iter(val) [5700/9234]    eta: 0:01:17  time: 0.0186  data_time: 0.0010  memory: 424  
2024/03/01 14:18:35 - mmengine - INFO - Iter(val) [5750/9234]    eta: 0:01:16  time: 0.0211  data_time: 0.0012  memory: 424  
2024/03/01 14:18:36 - mmengine - INFO - Iter(val) [5800/9234]    eta: 0:01:15  time: 0.0181  data_time: 0.0009  memory: 424  
2024/03/01 14:18:37 - mmengine - INFO - Iter(val) [5850/9234]    eta: 0:01:13  time: 0.0187  data_time: 0.0011  memory: 424  
2024/03/01 14:18:38 - mmengine - INFO - Iter(val) [5900/9234]    eta: 0:01:12  time: 0.0189  data_time: 0.0011  memory: 424  
2024/03/01 14:18:38 - mmengine - INFO - Iter(val) [5950/9234]    eta: 0:01:11  time: 0.0182  data_time: 0.0009  memory: 424  
2024/03/01 14:18:40 - mmengine - INFO - Iter(val) [6000/9234]    eta: 0:01:10  time: 0.0206  data_time: 0.0009  memory: 424  
2024/03/01 14:18:40 - mmengine - INFO - Iter(val) [6050/9234]    eta: 0:01:09  time: 0.0180  data_time: 0.0011  memory: 424  
2024/03/01 14:18:41 - mmengine - INFO - Iter(val) [6100/9234]    eta: 0:01:08  time: 0.0192  data_time: 0.0011  memory: 424  
2024/03/01 14:18:42 - mmengine - INFO - Iter(val) [6150/9234]    eta: 0:01:07  time: 0.0194  data_time: 0.0011  memory: 424  
2024/03/01 14:18:43 - mmengine - INFO - Iter(val) [6200/9234]    eta: 0:01:05  time: 0.0171  data_time: 0.0008  memory: 424  
2024/03/01 14:18:44 - mmengine - INFO - Iter(val) [6250/9234]    eta: 0:01:04  time: 0.0207  data_time: 0.0009  memory: 424  
2024/03/01 14:18:45 - mmengine - INFO - Iter(val) [6300/9234]    eta: 0:01:03  time: 0.0186  data_time: 0.0009  memory: 424  
2024/03/01 14:18:46 - mmengine - INFO - Iter(val) [6350/9234]    eta: 0:01:02  time: 0.0198  data_time: 0.0011  memory: 424  
2024/03/01 14:18:47 - mmengine - INFO - Iter(val) [6400/9234]    eta: 0:01:01  time: 0.0186  data_time: 0.0010  memory: 424  
2024/03/01 14:18:48 - mmengine - INFO - Iter(val) [6450/9234]    eta: 0:01:00  time: 0.0212  data_time: 0.0009  memory: 424  
2024/03/01 14:18:49 - mmengine - INFO - Iter(val) [6500/9234]    eta: 0:00:59  time: 0.0178  data_time: 0.0009  memory: 424  
2024/03/01 14:18:50 - mmengine - INFO - Iter(val) [6550/9234]    eta: 0:00:57  time: 0.0189  data_time: 0.0010  memory: 424  
2024/03/01 14:18:51 - mmengine - INFO - Iter(val) [6600/9234]    eta: 0:00:56  time: 0.0193  data_time: 0.0011  memory: 424  
2024/03/01 14:18:52 - mmengine - INFO - Iter(val) [6650/9234]    eta: 0:00:55  time: 0.0180  data_time: 0.0008  memory: 424  
2024/03/01 14:18:53 - mmengine - INFO - Iter(val) [6700/9234]    eta: 0:00:54  time: 0.0213  data_time: 0.0009  memory: 424  
2024/03/01 14:18:54 - mmengine - INFO - Iter(val) [6750/9234]    eta: 0:00:53  time: 0.0181  data_time: 0.0009  memory: 424  
2024/03/01 14:18:55 - mmengine - INFO - Iter(val) [6800/9234]    eta: 0:00:52  time: 0.0193  data_time: 0.0011  memory: 424  
2024/03/01 14:18:56 - mmengine - INFO - Iter(val) [6850/9234]    eta: 0:00:51  time: 0.0234  data_time: 0.0011  memory: 424  
2024/03/01 14:18:57 - mmengine - INFO - Iter(val) [6900/9234]    eta: 0:00:50  time: 0.0205  data_time: 0.0009  memory: 424  
2024/03/01 14:18:58 - mmengine - INFO - Iter(val) [6950/9234]    eta: 0:00:49  time: 0.0183  data_time: 0.0009  memory: 424  
2024/03/01 14:18:59 - mmengine - INFO - Iter(val) [7000/9234]    eta: 0:00:47  time: 0.0194  data_time: 0.0011  memory: 424  
2024/03/01 14:19:00 - mmengine - INFO - Iter(val) [7050/9234]    eta: 0:00:46  time: 0.0196  data_time: 0.0011  memory: 424  
2024/03/01 14:19:01 - mmengine - INFO - Iter(val) [7100/9234]    eta: 0:00:45  time: 0.0179  data_time: 0.0009  memory: 424  
2024/03/01 14:19:02 - mmengine - INFO - Iter(val) [7150/9234]    eta: 0:00:44  time: 0.0213  data_time: 0.0009  memory: 424  
2024/03/01 14:19:03 - mmengine - INFO - Iter(val) [7200/9234]    eta: 0:00:43  time: 0.0219  data_time: 0.0009  memory: 424  
2024/03/01 14:19:04 - mmengine - INFO - Iter(val) [7250/9234]    eta: 0:00:42  time: 0.0246  data_time: 0.0011  memory: 424  
2024/03/01 14:19:05 - mmengine - INFO - Iter(val) [7300/9234]    eta: 0:00:41  time: 0.0224  data_time: 0.0009  memory: 424  
2024/03/01 14:19:07 - mmengine - INFO - Iter(val) [7350/9234]    eta: 0:00:40  time: 0.0252  data_time: 0.0010  memory: 424  
2024/03/01 14:19:08 - mmengine - INFO - Iter(val) [7400/9234]    eta: 0:00:39  time: 0.0229  data_time: 0.0010  memory: 424  
2024/03/01 14:19:09 - mmengine - INFO - Iter(val) [7450/9234]    eta: 0:00:38  time: 0.0245  data_time: 0.0011  memory: 424  
2024/03/01 14:19:10 - mmengine - INFO - Iter(val) [7500/9234]    eta: 0:00:37  time: 0.0249  data_time: 0.0009  memory: 424  
2024/03/01 14:19:12 - mmengine - INFO - Iter(val) [7550/9234]    eta: 0:00:36  time: 0.0225  data_time: 0.0010  memory: 424  
2024/03/01 14:19:12 - mmengine - INFO - Iter(val) [7600/9234]    eta: 0:00:35  time: 0.0180  data_time: 0.0010  memory: 424  
2024/03/01 14:19:13 - mmengine - INFO - Iter(val) [7650/9234]    eta: 0:00:34  time: 0.0194  data_time: 0.0011  memory: 424  
2024/03/01 14:19:14 - mmengine - INFO - Iter(val) [7700/9234]    eta: 0:00:32  time: 0.0179  data_time: 0.0009  memory: 424  
2024/03/01 14:19:15 - mmengine - INFO - Iter(val) [7750/9234]    eta: 0:00:31  time: 0.0209  data_time: 0.0010  memory: 424  
2024/03/01 14:19:16 - mmengine - INFO - Iter(val) [7800/9234]    eta: 0:00:30  time: 0.0178  data_time: 0.0009  memory: 424  
2024/03/01 14:19:17 - mmengine - INFO - Iter(val) [7850/9234]    eta: 0:00:29  time: 0.0196  data_time: 0.0011  memory: 424  
2024/03/01 14:19:18 - mmengine - INFO - Iter(val) [7900/9234]    eta: 0:00:28  time: 0.0193  data_time: 0.0011  memory: 424  
2024/03/01 14:19:19 - mmengine - INFO - Iter(val) [7950/9234]    eta: 0:00:27  time: 0.0205  data_time: 0.0009  memory: 424  
2024/03/01 14:19:20 - mmengine - INFO - Iter(val) [8000/9234]    eta: 0:00:26  time: 0.0190  data_time: 0.0009  memory: 424  
2024/03/01 14:19:21 - mmengine - INFO - Iter(val) [8050/9234]    eta: 0:00:25  time: 0.0183  data_time: 0.0009  memory: 424  
2024/03/01 14:19:22 - mmengine - INFO - Iter(val) [8100/9234]    eta: 0:00:24  time: 0.0192  data_time: 0.0011  memory: 424  
2024/03/01 14:19:23 - mmengine - INFO - Iter(val) [8150/9234]    eta: 0:00:23  time: 0.0178  data_time: 0.0009  memory: 424  
2024/03/01 14:19:24 - mmengine - INFO - Iter(val) [8200/9234]    eta: 0:00:22  time: 0.0221  data_time: 0.0010  memory: 424  
2024/03/01 14:19:25 - mmengine - INFO - Iter(val) [8250/9234]    eta: 0:00:20  time: 0.0184  data_time: 0.0009  memory: 424  
2024/03/01 14:19:26 - mmengine - INFO - Iter(val) [8300/9234]    eta: 0:00:19  time: 0.0195  data_time: 0.0011  memory: 424  
2024/03/01 14:19:27 - mmengine - INFO - Iter(val) [8350/9234]    eta: 0:00:18  time: 0.0188  data_time: 0.0011  memory: 424  
2024/03/01 14:19:28 - mmengine - INFO - Iter(val) [8400/9234]    eta: 0:00:17  time: 0.0175  data_time: 0.0008  memory: 424  
2024/03/01 14:19:29 - mmengine - INFO - Iter(val) [8450/9234]    eta: 0:00:16  time: 0.0209  data_time: 0.0009  memory: 424  
2024/03/01 14:19:30 - mmengine - INFO - Iter(val) [8500/9234]    eta: 0:00:15  time: 0.0179  data_time: 0.0009  memory: 424  
2024/03/01 14:19:31 - mmengine - INFO - Iter(val) [8550/9234]    eta: 0:00:14  time: 0.0188  data_time: 0.0010  memory: 424  
2024/03/01 14:19:32 - mmengine - INFO - Iter(val) [8600/9234]    eta: 0:00:13  time: 0.0184  data_time: 0.0011  memory: 424  
2024/03/01 14:19:33 - mmengine - INFO - Iter(val) [8650/9234]    eta: 0:00:12  time: 0.0225  data_time: 0.0010  memory: 424  
2024/03/01 14:19:34 - mmengine - INFO - Iter(val) [8700/9234]    eta: 0:00:11  time: 0.0178  data_time: 0.0009  memory: 424  
2024/03/01 14:19:35 - mmengine - INFO - Iter(val) [8750/9234]    eta: 0:00:10  time: 0.0186  data_time: 0.0010  memory: 424  
2024/03/01 14:19:36 - mmengine - INFO - Iter(val) [8800/9234]    eta: 0:00:09  time: 0.0192  data_time: 0.0010  memory: 424  
2024/03/01 14:19:37 - mmengine - INFO - Iter(val) [8850/9234]    eta: 0:00:08  time: 0.0191  data_time: 0.0008  memory: 424  
2024/03/01 14:19:38 - mmengine - INFO - Iter(val) [8900/9234]    eta: 0:00:07  time: 0.0230  data_time: 0.0010  memory: 424  
2024/03/01 14:19:39 - mmengine - INFO - Iter(val) [8950/9234]    eta: 0:00:06  time: 0.0201  data_time: 0.0010  memory: 424  
2024/03/01 14:19:40 - mmengine - INFO - Iter(val) [9000/9234]    eta: 0:00:04  time: 0.0200  data_time: 0.0011  memory: 424  
2024/03/01 14:19:41 - mmengine - INFO - Iter(val) [9050/9234]    eta: 0:00:03  time: 0.0194  data_time: 0.0009  memory: 424  
2024/03/01 14:19:42 - mmengine - INFO - Iter(val) [9100/9234]    eta: 0:00:02  time: 0.0217  data_time: 0.0009  memory: 424  
2024/03/01 14:19:43 - mmengine - INFO - Iter(val) [9150/9234]    eta: 0:00:01  time: 0.0203  data_time: 0.0010  memory: 424  
2024/03/01 14:19:44 - mmengine - INFO - Iter(val) [9200/9234]    eta: 0:00:00  time: 0.0213  data_time: 0.0011  memory: 424  
2024/03/01 14:22:23 - mmengine - INFO - Iter(val) [9234/9234]    reid-metric/mAP: 0.4410  reid-metric/R1: 0.9680  reid-metric/R5: 0.9880  reid-metric/R10: 0.9930  reid-metric/R20: 0.9950  data_time: 0.0010  time: 0.0212
2024/03/01 14:22:23 - mmengine - INFO - The previous best checkpoint /home/kzy/project/mmdetection/experiments/enc_b32/best_reid-metric_mAP_iter_1000.pth is removed
2024/03/01 14:22:24 - mmengine - INFO - The best checkpoint with 0.4410 reid-metric/mAP at 2000 iter is saved to best_reid-metric_mAP_iter_2000.pth.
2024/03/01 14:22:35 - mmengine - INFO - Iter(train) [  2050/140000]  lr: 1.0000e-02  eta: 19:20:33  time: 3.4134  data_time: 3.2218  memory: 7197  loss: 1.8634  triplet_loss: 0.3400  ce_loss: 1.5235  accuracy_top-1: 34.3750
2024/03/01 14:22:45 - mmengine - INFO - Iter(train) [  2100/140000]  lr: 1.0000e-02  eta: 19:03:23  time: 0.1988  data_time: 0.0083  memory: 7197  loss: 1.6881  triplet_loss: 0.3263  ce_loss: 1.3619  accuracy_top-1: 48.4375
2024/03/01 14:22:55 - mmengine - INFO - Iter(train) [  2150/140000]  lr: 1.0000e-02  eta: 18:47:05  time: 0.2003  data_time: 0.0087  memory: 7197  loss: 1.8329  triplet_loss: 0.3684  ce_loss: 1.4645  accuracy_top-1: 54.6875
2024/03/01 14:23:09 - mmengine - INFO - Iter(train) [  2200/140000]  lr: 1.0000e-02  eta: 18:35:09  time: 0.2696  data_time: 0.0083  memory: 7197  loss: 1.8221  triplet_loss: 0.3613  ce_loss: 1.4609  accuracy_top-1: 53.1250
2024/03/01 14:23:21 - mmengine - INFO - Iter(train) [  2250/140000]  lr: 1.0000e-02  eta: 18:22:33  time: 0.2466  data_time: 0.0083  memory: 7197  loss: 1.6931  triplet_loss: 0.3508  ce_loss: 1.3423  accuracy_top-1: 68.7500
2024/03/01 14:23:31 - mmengine - INFO - Iter(train) [  2300/140000]  lr: 1.0000e-02  eta: 18:08:11  time: 0.2003  data_time: 0.0084  memory: 7197  loss: 1.6483  triplet_loss: 0.3380  ce_loss: 1.3103  accuracy_top-1: 60.9375
2024/03/01 14:23:41 - mmengine - INFO - Iter(train) [  2350/140000]  lr: 1.0000e-02  eta: 17:54:21  time: 0.1990  data_time: 0.0081  memory: 7197  loss: 1.5659  triplet_loss: 0.2586  ce_loss: 1.3073  accuracy_top-1: 78.1250
2024/03/01 14:23:51 - mmengine - INFO - Iter(train) [  2400/140000]  lr: 1.0000e-02  eta: 17:41:06  time: 0.1993  data_time: 0.0078  memory: 7197  loss: 1.7011  triplet_loss: 0.3940  ce_loss: 1.3071  accuracy_top-1: 71.8750
2024/03/01 14:24:01 - mmengine - INFO - Iter(train) [  2450/140000]  lr: 1.0000e-02  eta: 17:28:24  time: 0.1992  data_time: 0.0081  memory: 7197  loss: 1.4744  triplet_loss: 0.2287  ce_loss: 1.2458  accuracy_top-1: 71.8750
2024/03/01 14:24:17 - mmengine - INFO - Iter(train) [  2500/140000]  lr: 1.0000e-02  eta: 17:21:26  time: 0.3136  data_time: 0.0075  memory: 7197  loss: 1.3837  triplet_loss: 0.2402  ce_loss: 1.1435  accuracy_top-1: 62.5000
2024/03/01 14:24:26 - mmengine - INFO - Iter(train) [  2550/140000]  lr: 1.0000e-02  eta: 17:09:25  time: 0.1955  data_time: 0.0075  memory: 7197  loss: 1.4799  triplet_loss: 0.3235  ce_loss: 1.1564  accuracy_top-1: 51.5625
2024/03/01 14:24:37 - mmengine - INFO - Iter(train) [  2600/140000]  lr: 1.0000e-02  eta: 16:58:31  time: 0.2105  data_time: 0.0088  memory: 7197  loss: 1.3862  triplet_loss: 0.2722  ce_loss: 1.1141  accuracy_top-1: 73.4375
2024/03/01 14:24:48 - mmengine - INFO - Iter(train) [  2650/140000]  lr: 1.0000e-02  eta: 16:48:26  time: 0.2195  data_time: 0.0095  memory: 7197  loss: 1.4807  triplet_loss: 0.2648  ce_loss: 1.2160  accuracy_top-1: 57.8125
2024/03/01 14:24:59 - mmengine - INFO - Iter(train) [  2700/140000]  lr: 1.0000e-02  eta: 16:38:28  time: 0.2140  data_time: 0.0088  memory: 7197  loss: 1.4101  triplet_loss: 0.3231  ce_loss: 1.0870  accuracy_top-1: 60.9375
2024/03/01 14:25:13 - mmengine - INFO - Iter(train) [  2750/140000]  lr: 1.0000e-02  eta: 16:31:51  time: 0.2861  data_time: 0.0089  memory: 7197  loss: 1.2850  triplet_loss: 0.2704  ce_loss: 1.0145  accuracy_top-1: 70.3125
2024/03/01 14:25:24 - mmengine - INFO - Iter(train) [  2800/140000]  lr: 1.0000e-02  eta: 16:22:34  time: 0.2151  data_time: 0.0086  memory: 7197  loss: 1.3289  triplet_loss: 0.3098  ce_loss: 1.0190  accuracy_top-1: 71.8750
2024/03/01 14:25:34 - mmengine - INFO - Iter(train) [  2850/140000]  lr: 1.0000e-02  eta: 16:13:34  time: 0.2142  data_time: 0.0081  memory: 7197  loss: 1.3282  triplet_loss: 0.2673  ce_loss: 1.0610  accuracy_top-1: 67.1875
2024/03/01 14:25:45 - mmengine - INFO - Iter(train) [  2900/140000]  lr: 1.0000e-02  eta: 16:04:49  time: 0.2127  data_time: 0.0085  memory: 7197  loss: 1.0838  triplet_loss: 0.1924  ce_loss: 0.8914  accuracy_top-1: 78.1250
2024/03/01 14:25:56 - mmengine - INFO - Iter(train) [  2950/140000]  lr: 1.0000e-02  eta: 15:56:23  time: 0.2135  data_time: 0.0083  memory: 7197  loss: 0.9840  triplet_loss: 0.1772  ce_loss: 0.8069  accuracy_top-1: 87.5000
2024/03/01 14:26:11 - mmengine - INFO - Exp name: reid_testmodel_20240301_135802
2024/03/01 14:26:11 - mmengine - INFO - Iter(train) [  3000/140000]  lr: 1.0000e-02  eta: 15:51:24  time: 0.2969  data_time: 0.0085  memory: 7197  loss: 1.1528  triplet_loss: 0.2263  ce_loss: 0.9266  accuracy_top-1: 60.9375
2024/03/01 14:26:12 - mmengine - INFO - Iter(val) [  50/9234]    eta: 0:05:26  time: 0.0355  data_time: 0.0014  memory: 424  
2024/03/01 14:26:14 - mmengine - INFO - Iter(val) [ 100/9234]    eta: 0:05:10  time: 0.0324  data_time: 0.0013  memory: 424  
2024/03/01 14:26:16 - mmengine - INFO - Iter(val) [ 150/9234]    eta: 0:04:59  time: 0.0310  data_time: 0.0014  memory: 424  
2024/03/01 14:26:17 - mmengine - INFO - Iter(val) [ 200/9234]    eta: 0:04:55  time: 0.0321  data_time: 0.0014  memory: 424  
2024/03/01 14:26:19 - mmengine - INFO - Iter(val) [ 250/9234]    eta: 0:04:47  time: 0.0292  data_time: 0.0013  memory: 424  
2024/03/01 14:26:20 - mmengine - INFO - Iter(val) [ 300/9234]    eta: 0:04:44  time: 0.0310  data_time: 0.0013  memory: 424  
2024/03/01 14:26:22 - mmengine - INFO - Iter(val) [ 350/9234]    eta: 0:04:41  time: 0.0307  data_time: 0.0013  memory: 424  
2024/03/01 14:26:23 - mmengine - INFO - Iter(val) [ 400/9234]    eta: 0:04:38  time: 0.0306  data_time: 0.0013  memory: 424  
2024/03/01 14:26:25 - mmengine - INFO - Iter(val) [ 450/9234]    eta: 0:04:35  time: 0.0298  data_time: 0.0014  memory: 424  
2024/03/01 14:26:26 - mmengine - INFO - Iter(val) [ 500/9234]    eta: 0:04:32  time: 0.0298  data_time: 0.0014  memory: 424  
2024/03/01 14:26:28 - mmengine - INFO - Iter(val) [ 550/9234]    eta: 0:04:31  time: 0.0313  data_time: 0.0013  memory: 424  
2024/03/01 14:26:29 - mmengine - INFO - Iter(val) [ 600/9234]    eta: 0:04:29  time: 0.0309  data_time: 0.0014  memory: 424  
2024/03/01 14:26:31 - mmengine - INFO - Iter(val) [ 650/9234]    eta: 0:04:27  time: 0.0302  data_time: 0.0017  memory: 424  
2024/03/01 14:26:32 - mmengine - INFO - Iter(val) [ 700/9234]    eta: 0:04:25  time: 0.0306  data_time: 0.0013  memory: 424  
2024/03/01 14:26:34 - mmengine - INFO - Iter(val) [ 750/9234]    eta: 0:04:23  time: 0.0309  data_time: 0.0013  memory: 424  
2024/03/01 14:26:36 - mmengine - INFO - Iter(val) [ 800/9234]    eta: 0:04:23  time: 0.0340  data_time: 0.0015  memory: 424  
2024/03/01 14:26:37 - mmengine - INFO - Iter(val) [ 850/9234]    eta: 0:04:22  time: 0.0332  data_time: 0.0013  memory: 424  
2024/03/01 14:26:39 - mmengine - INFO - Iter(val) [ 900/9234]    eta: 0:04:21  time: 0.0309  data_time: 0.0013  memory: 424  
2024/03/01 14:26:40 - mmengine - INFO - Iter(val) [ 950/9234]    eta: 0:04:18  time: 0.0298  data_time: 0.0013  memory: 424  
2024/03/01 14:26:42 - mmengine - INFO - Iter(val) [1000/9234]    eta: 0:04:16  time: 0.0293  data_time: 0.0012  memory: 424  
2024/03/01 14:26:43 - mmengine - INFO - Iter(val) [1050/9234]    eta: 0:04:13  time: 0.0284  data_time: 0.0012  memory: 424  
2024/03/01 14:26:45 - mmengine - INFO - Iter(val) [1100/9234]    eta: 0:04:11  time: 0.0289  data_time: 0.0012  memory: 424  
2024/03/01 14:26:46 - mmengine - INFO - Iter(val) [1150/9234]    eta: 0:04:09  time: 0.0291  data_time: 0.0012  memory: 424  
2024/03/01 14:26:48 - mmengine - INFO - Iter(val) [1200/9234]    eta: 0:04:07  time: 0.0310  data_time: 0.0013  memory: 424  
2024/03/01 14:26:49 - mmengine - INFO - Iter(val) [1250/9234]    eta: 0:04:06  time: 0.0306  data_time: 0.0014  memory: 424  
2024/03/01 14:26:51 - mmengine - INFO - Iter(val) [1300/9234]    eta: 0:04:04  time: 0.0301  data_time: 0.0013  memory: 424  
2024/03/01 14:26:52 - mmengine - INFO - Iter(val) [1350/9234]    eta: 0:04:03  time: 0.0315  data_time: 0.0014  memory: 424  
2024/03/01 14:26:54 - mmengine - INFO - Iter(val) [1400/9234]    eta: 0:04:01  time: 0.0315  data_time: 0.0013  memory: 424  
2024/03/01 14:26:56 - mmengine - INFO - Iter(val) [1450/9234]    eta: 0:04:00  time: 0.0305  data_time: 0.0014  memory: 424  
2024/03/01 14:26:57 - mmengine - INFO - Iter(val) [1500/9234]    eta: 0:03:58  time: 0.0305  data_time: 0.0013  memory: 424  
2024/03/01 14:26:59 - mmengine - INFO - Iter(val) [1550/9234]    eta: 0:03:56  time: 0.0310  data_time: 0.0013  memory: 424  
2024/03/01 14:27:00 - mmengine - INFO - Iter(val) [1600/9234]    eta: 0:03:55  time: 0.0292  data_time: 0.0013  memory: 424  
2024/03/01 14:27:02 - mmengine - INFO - Iter(val) [1650/9234]    eta: 0:03:53  time: 0.0298  data_time: 0.0013  memory: 424  
2024/03/01 14:27:03 - mmengine - INFO - Iter(val) [1700/9234]    eta: 0:03:52  time: 0.0357  data_time: 0.0013  memory: 424  
2024/03/01 14:27:05 - mmengine - INFO - Iter(val) [1750/9234]    eta: 0:03:52  time: 0.0378  data_time: 0.0014  memory: 424  
2024/03/01 14:27:07 - mmengine - INFO - Iter(val) [1800/9234]    eta: 0:03:52  time: 0.0371  data_time: 0.0014  memory: 424  
2024/03/01 14:27:09 - mmengine - INFO - Iter(val) [1850/9234]    eta: 0:03:51  time: 0.0358  data_time: 0.0014  memory: 424  
2024/03/01 14:27:11 - mmengine - INFO - Iter(val) [1900/9234]    eta: 0:03:50  time: 0.0354  data_time: 0.0014  memory: 424  
2024/03/01 14:27:13 - mmengine - INFO - Iter(val) [1950/9234]    eta: 0:03:50  time: 0.0355  data_time: 0.0013  memory: 424  
2024/03/01 14:27:14 - mmengine - INFO - Iter(val) [2000/9234]    eta: 0:03:48  time: 0.0311  data_time: 0.0013  memory: 424  
2024/03/01 14:27:16 - mmengine - INFO - Iter(val) [2050/9234]    eta: 0:03:46  time: 0.0300  data_time: 0.0013  memory: 424  
2024/03/01 14:27:17 - mmengine - INFO - Iter(val) [2100/9234]    eta: 0:03:44  time: 0.0289  data_time: 0.0012  memory: 424  
2024/03/01 14:27:19 - mmengine - INFO - Iter(val) [2150/9234]    eta: 0:03:42  time: 0.0292  data_time: 0.0013  memory: 424  
2024/03/01 14:27:20 - mmengine - INFO - Iter(val) [2200/9234]    eta: 0:03:40  time: 0.0298  data_time: 0.0013  memory: 424  
2024/03/01 14:27:22 - mmengine - INFO - Iter(val) [2250/9234]    eta: 0:03:39  time: 0.0303  data_time: 0.0013  memory: 424  
2024/03/01 14:27:23 - mmengine - INFO - Iter(val) [2300/9234]    eta: 0:03:37  time: 0.0302  data_time: 0.0013  memory: 424  
2024/03/01 14:27:25 - mmengine - INFO - Iter(val) [2350/9234]    eta: 0:03:35  time: 0.0305  data_time: 0.0012  memory: 424  
2024/03/01 14:27:26 - mmengine - INFO - Iter(val) [2400/9234]    eta: 0:03:33  time: 0.0298  data_time: 0.0012  memory: 424  
2024/03/01 14:27:28 - mmengine - INFO - Iter(val) [2450/9234]    eta: 0:03:32  time: 0.0304  data_time: 0.0015  memory: 424  
2024/03/01 14:27:29 - mmengine - INFO - Iter(val) [2500/9234]    eta: 0:03:30  time: 0.0301  data_time: 0.0014  memory: 424  
2024/03/01 14:27:31 - mmengine - INFO - Iter(val) [2550/9234]    eta: 0:03:28  time: 0.0311  data_time: 0.0014  memory: 424  
2024/03/01 14:27:32 - mmengine - INFO - Iter(val) [2600/9234]    eta: 0:03:27  time: 0.0299  data_time: 0.0013  memory: 424  
2024/03/01 14:27:34 - mmengine - INFO - Iter(val) [2650/9234]    eta: 0:03:25  time: 0.0299  data_time: 0.0012  memory: 424  
2024/03/01 14:27:35 - mmengine - INFO - Iter(val) [2700/9234]    eta: 0:03:23  time: 0.0307  data_time: 0.0013  memory: 424  
2024/03/01 14:27:37 - mmengine - INFO - Iter(val) [2750/9234]    eta: 0:03:22  time: 0.0302  data_time: 0.0014  memory: 424  
2024/03/01 14:27:38 - mmengine - INFO - Iter(val) [2800/9234]    eta: 0:03:20  time: 0.0307  data_time: 0.0013  memory: 424  
2024/03/01 14:27:40 - mmengine - INFO - Iter(val) [2850/9234]    eta: 0:03:18  time: 0.0302  data_time: 0.0013  memory: 424  
2024/03/01 14:27:42 - mmengine - INFO - Iter(val) [2900/9234]    eta: 0:03:17  time: 0.0305  data_time: 0.0014  memory: 424  
2024/03/01 14:27:43 - mmengine - INFO - Iter(val) [2950/9234]    eta: 0:03:15  time: 0.0308  data_time: 0.0013  memory: 424  
2024/03/01 14:27:45 - mmengine - INFO - Iter(val) [3000/9234]    eta: 0:03:13  time: 0.0297  data_time: 0.0012  memory: 424  
2024/03/01 14:27:46 - mmengine - INFO - Iter(val) [3050/9234]    eta: 0:03:12  time: 0.0307  data_time: 0.0013  memory: 424  
2024/03/01 14:27:48 - mmengine - INFO - Iter(val) [3100/9234]    eta: 0:03:10  time: 0.0318  data_time: 0.0013  memory: 424  
2024/03/01 14:27:49 - mmengine - INFO - Iter(val) [3150/9234]    eta: 0:03:09  time: 0.0291  data_time: 0.0013  memory: 424  
2024/03/01 14:27:51 - mmengine - INFO - Iter(val) [3200/9234]    eta: 0:03:07  time: 0.0311  data_time: 0.0013  memory: 424  
2024/03/01 14:27:52 - mmengine - INFO - Iter(val) [3250/9234]    eta: 0:03:05  time: 0.0311  data_time: 0.0013  memory: 424  
2024/03/01 14:27:54 - mmengine - INFO - Iter(val) [3300/9234]    eta: 0:03:04  time: 0.0305  data_time: 0.0013  memory: 424  
2024/03/01 14:27:55 - mmengine - INFO - Iter(val) [3350/9234]    eta: 0:03:02  time: 0.0297  data_time: 0.0012  memory: 424  
2024/03/01 14:27:57 - mmengine - INFO - Iter(val) [3400/9234]    eta: 0:03:01  time: 0.0302  data_time: 0.0013  memory: 424  
2024/03/01 14:27:58 - mmengine - INFO - Iter(val) [3450/9234]    eta: 0:02:59  time: 0.0296  data_time: 0.0013  memory: 424  
2024/03/01 14:28:00 - mmengine - INFO - Iter(val) [3500/9234]    eta: 0:02:57  time: 0.0297  data_time: 0.0013  memory: 424  
2024/03/01 14:28:01 - mmengine - INFO - Iter(val) [3550/9234]    eta: 0:02:56  time: 0.0302  data_time: 0.0013  memory: 424  
2024/03/01 14:28:03 - mmengine - INFO - Iter(val) [3600/9234]    eta: 0:02:54  time: 0.0320  data_time: 0.0012  memory: 424  
2024/03/01 14:28:05 - mmengine - INFO - Iter(val) [3650/9234]    eta: 0:02:53  time: 0.0359  data_time: 0.0014  memory: 424  
2024/03/01 14:28:07 - mmengine - INFO - Iter(val) [3700/9234]    eta: 0:02:52  time: 0.0357  data_time: 0.0013  memory: 424  
2024/03/01 14:28:08 - mmengine - INFO - Iter(val) [3750/9234]    eta: 0:02:51  time: 0.0361  data_time: 0.0013  memory: 424  
2024/03/01 14:28:10 - mmengine - INFO - Iter(val) [3800/9234]    eta: 0:02:49  time: 0.0347  data_time: 0.0013  memory: 424  
2024/03/01 14:28:12 - mmengine - INFO - Iter(val) [3850/9234]    eta: 0:02:48  time: 0.0364  data_time: 0.0014  memory: 424  
2024/03/01 14:28:14 - mmengine - INFO - Iter(val) [3900/9234]    eta: 0:02:47  time: 0.0336  data_time: 0.0013  memory: 424  
2024/03/01 14:28:15 - mmengine - INFO - Iter(val) [3950/9234]    eta: 0:02:45  time: 0.0312  data_time: 0.0013  memory: 424  
2024/03/01 14:28:17 - mmengine - INFO - Iter(val) [4000/9234]    eta: 0:02:43  time: 0.0293  data_time: 0.0012  memory: 424  
2024/03/01 14:28:18 - mmengine - INFO - Iter(val) [4050/9234]    eta: 0:02:42  time: 0.0299  data_time: 0.0014  memory: 424  
2024/03/01 14:28:20 - mmengine - INFO - Iter(val) [4100/9234]    eta: 0:02:40  time: 0.0303  data_time: 0.0013  memory: 424  
2024/03/01 14:28:21 - mmengine - INFO - Iter(val) [4150/9234]    eta: 0:02:39  time: 0.0315  data_time: 0.0015  memory: 424  
2024/03/01 14:28:23 - mmengine - INFO - Iter(val) [4200/9234]    eta: 0:02:37  time: 0.0307  data_time: 0.0014  memory: 424  
2024/03/01 14:28:24 - mmengine - INFO - Iter(val) [4250/9234]    eta: 0:02:35  time: 0.0290  data_time: 0.0013  memory: 424  
2024/03/01 14:28:26 - mmengine - INFO - Iter(val) [4300/9234]    eta: 0:02:34  time: 0.0295  data_time: 0.0012  memory: 424  
2024/03/01 14:28:27 - mmengine - INFO - Iter(val) [4350/9234]    eta: 0:02:32  time: 0.0307  data_time: 0.0014  memory: 424  
2024/03/01 14:28:29 - mmengine - INFO - Iter(val) [4400/9234]    eta: 0:02:30  time: 0.0292  data_time: 0.0013  memory: 424  
2024/03/01 14:28:30 - mmengine - INFO - Iter(val) [4450/9234]    eta: 0:02:29  time: 0.0310  data_time: 0.0013  memory: 424  
2024/03/01 14:28:32 - mmengine - INFO - Iter(val) [4500/9234]    eta: 0:02:27  time: 0.0315  data_time: 0.0014  memory: 424  
2024/03/01 14:28:34 - mmengine - INFO - Iter(val) [4550/9234]    eta: 0:02:26  time: 0.0288  data_time: 0.0012  memory: 424  
2024/03/01 14:28:35 - mmengine - INFO - Iter(val) [4600/9234]    eta: 0:02:24  time: 0.0296  data_time: 0.0013  memory: 424  
2024/03/01 14:28:37 - mmengine - INFO - Iter(val) [4650/9234]    eta: 0:02:22  time: 0.0303  data_time: 0.0013  memory: 424  
2024/03/01 14:28:38 - mmengine - INFO - Iter(val) [4700/9234]    eta: 0:02:21  time: 0.0312  data_time: 0.0013  memory: 424  
2024/03/01 14:28:40 - mmengine - INFO - Iter(val) [4750/9234]    eta: 0:02:19  time: 0.0297  data_time: 0.0012  memory: 424  
2024/03/01 14:28:41 - mmengine - INFO - Iter(val) [4800/9234]    eta: 0:02:17  time: 0.0289  data_time: 0.0013  memory: 424  
2024/03/01 14:28:43 - mmengine - INFO - Iter(val) [4850/9234]    eta: 0:02:16  time: 0.0295  data_time: 0.0013  memory: 424  
2024/03/01 14:28:44 - mmengine - INFO - Iter(val) [4900/9234]    eta: 0:02:14  time: 0.0301  data_time: 0.0013  memory: 424  
2024/03/01 14:28:46 - mmengine - INFO - Iter(val) [4950/9234]    eta: 0:02:13  time: 0.0301  data_time: 0.0012  memory: 424  
2024/03/01 14:28:47 - mmengine - INFO - Iter(val) [5000/9234]    eta: 0:02:11  time: 0.0305  data_time: 0.0013  memory: 424  
2024/03/01 14:28:49 - mmengine - INFO - Iter(val) [5050/9234]    eta: 0:02:09  time: 0.0299  data_time: 0.0013  memory: 424  
2024/03/01 14:28:50 - mmengine - INFO - Iter(val) [5100/9234]    eta: 0:02:08  time: 0.0303  data_time: 0.0013  memory: 424  
2024/03/01 14:28:52 - mmengine - INFO - Iter(val) [5150/9234]    eta: 0:02:06  time: 0.0303  data_time: 0.0013  memory: 424  
2024/03/01 14:28:53 - mmengine - INFO - Iter(val) [5200/9234]    eta: 0:02:05  time: 0.0301  data_time: 0.0013  memory: 424  
2024/03/01 14:28:55 - mmengine - INFO - Iter(val) [5250/9234]    eta: 0:02:03  time: 0.0302  data_time: 0.0014  memory: 424  
2024/03/01 14:28:56 - mmengine - INFO - Iter(val) [5300/9234]    eta: 0:02:01  time: 0.0292  data_time: 0.0013  memory: 424  
2024/03/01 14:28:58 - mmengine - INFO - Iter(val) [5350/9234]    eta: 0:02:00  time: 0.0288  data_time: 0.0013  memory: 424  
2024/03/01 14:28:59 - mmengine - INFO - Iter(val) [5400/9234]    eta: 0:01:58  time: 0.0289  data_time: 0.0012  memory: 424  
2024/03/01 14:29:01 - mmengine - INFO - Iter(val) [5450/9234]    eta: 0:01:57  time: 0.0307  data_time: 0.0012  memory: 424  
2024/03/01 14:29:02 - mmengine - INFO - Iter(val) [5500/9234]    eta: 0:01:55  time: 0.0315  data_time: 0.0013  memory: 424  
2024/03/01 14:29:04 - mmengine - INFO - Iter(val) [5550/9234]    eta: 0:01:54  time: 0.0319  data_time: 0.0013  memory: 424  
2024/03/01 14:29:06 - mmengine - INFO - Iter(val) [5600/9234]    eta: 0:01:52  time: 0.0354  data_time: 0.0015  memory: 424  
2024/03/01 14:29:08 - mmengine - INFO - Iter(val) [5650/9234]    eta: 0:01:51  time: 0.0385  data_time: 0.0014  memory: 424  
2024/03/01 14:29:09 - mmengine - INFO - Iter(val) [5700/9234]    eta: 0:01:49  time: 0.0350  data_time: 0.0013  memory: 424  
2024/03/01 14:29:11 - mmengine - INFO - Iter(val) [5750/9234]    eta: 0:01:48  time: 0.0339  data_time: 0.0013  memory: 424  
2024/03/01 14:29:13 - mmengine - INFO - Iter(val) [5800/9234]    eta: 0:01:46  time: 0.0311  data_time: 0.0013  memory: 424  
2024/03/01 14:29:14 - mmengine - INFO - Iter(val) [5850/9234]    eta: 0:01:45  time: 0.0301  data_time: 0.0013  memory: 424  
2024/03/01 14:29:16 - mmengine - INFO - Iter(val) [5900/9234]    eta: 0:01:43  time: 0.0313  data_time: 0.0013  memory: 424  
2024/03/01 14:29:17 - mmengine - INFO - Iter(val) [5950/9234]    eta: 0:01:42  time: 0.0309  data_time: 0.0013  memory: 424  
2024/03/01 14:29:19 - mmengine - INFO - Iter(val) [6000/9234]    eta: 0:01:40  time: 0.0304  data_time: 0.0012  memory: 424  
2024/03/01 14:29:20 - mmengine - INFO - Iter(val) [6050/9234]    eta: 0:01:39  time: 0.0310  data_time: 0.0013  memory: 424  
2024/03/01 14:29:22 - mmengine - INFO - Iter(val) [6100/9234]    eta: 0:01:37  time: 0.0300  data_time: 0.0013  memory: 424  
2024/03/01 14:29:23 - mmengine - INFO - Iter(val) [6150/9234]    eta: 0:01:35  time: 0.0308  data_time: 0.0013  memory: 424  
2024/03/01 14:29:25 - mmengine - INFO - Iter(val) [6200/9234]    eta: 0:01:34  time: 0.0301  data_time: 0.0013  memory: 424  
2024/03/01 14:29:27 - mmengine - INFO - Iter(val) [6250/9234]    eta: 0:01:32  time: 0.0299  data_time: 0.0012  memory: 424  
2024/03/01 14:29:28 - mmengine - INFO - Iter(val) [6300/9234]    eta: 0:01:31  time: 0.0297  data_time: 0.0013  memory: 424  
2024/03/01 14:29:30 - mmengine - INFO - Iter(val) [6350/9234]    eta: 0:01:29  time: 0.0310  data_time: 0.0014  memory: 424  
2024/03/01 14:29:31 - mmengine - INFO - Iter(val) [6400/9234]    eta: 0:01:28  time: 0.0282  data_time: 0.0012  memory: 424  
2024/03/01 14:29:32 - mmengine - INFO - Iter(val) [6450/9234]    eta: 0:01:26  time: 0.0295  data_time: 0.0013  memory: 424  
2024/03/01 14:29:34 - mmengine - INFO - Iter(val) [6500/9234]    eta: 0:01:24  time: 0.0292  data_time: 0.0012  memory: 424  
2024/03/01 14:29:35 - mmengine - INFO - Iter(val) [6550/9234]    eta: 0:01:23  time: 0.0292  data_time: 0.0012  memory: 424  
2024/03/01 14:29:37 - mmengine - INFO - Iter(val) [6600/9234]    eta: 0:01:21  time: 0.0305  data_time: 0.0012  memory: 424  
2024/03/01 14:29:39 - mmengine - INFO - Iter(val) [6650/9234]    eta: 0:01:20  time: 0.0308  data_time: 0.0013  memory: 424  
2024/03/01 14:29:40 - mmengine - INFO - Iter(val) [6700/9234]    eta: 0:01:18  time: 0.0303  data_time: 0.0013  memory: 424  
2024/03/01 14:29:42 - mmengine - INFO - Iter(val) [6750/9234]    eta: 0:01:16  time: 0.0290  data_time: 0.0012  memory: 424  
2024/03/01 14:29:43 - mmengine - INFO - Iter(val) [6800/9234]    eta: 0:01:15  time: 0.0290  data_time: 0.0013  memory: 424  
2024/03/01 14:29:44 - mmengine - INFO - Iter(val) [6850/9234]    eta: 0:01:13  time: 0.0295  data_time: 0.0012  memory: 424  
2024/03/01 14:29:46 - mmengine - INFO - Iter(val) [6900/9234]    eta: 0:01:12  time: 0.0318  data_time: 0.0013  memory: 424  
2024/03/01 14:29:48 - mmengine - INFO - Iter(val) [6950/9234]    eta: 0:01:10  time: 0.0322  data_time: 0.0013  memory: 424  
2024/03/01 14:29:49 - mmengine - INFO - Iter(val) [7000/9234]    eta: 0:01:09  time: 0.0302  data_time: 0.0013  memory: 424  
2024/03/01 14:29:51 - mmengine - INFO - Iter(val) [7050/9234]    eta: 0:01:07  time: 0.0297  data_time: 0.0012  memory: 424  
2024/03/01 14:29:52 - mmengine - INFO - Iter(val) [7100/9234]    eta: 0:01:06  time: 0.0300  data_time: 0.0013  memory: 424  
2024/03/01 14:29:54 - mmengine - INFO - Iter(val) [7150/9234]    eta: 0:01:04  time: 0.0288  data_time: 0.0012  memory: 424  
2024/03/01 14:29:55 - mmengine - INFO - Iter(val) [7200/9234]    eta: 0:01:02  time: 0.0292  data_time: 0.0012  memory: 424  
2024/03/01 14:29:57 - mmengine - INFO - Iter(val) [7250/9234]    eta: 0:01:01  time: 0.0321  data_time: 0.0013  memory: 424  
2024/03/01 14:29:58 - mmengine - INFO - Iter(val) [7300/9234]    eta: 0:00:59  time: 0.0305  data_time: 0.0012  memory: 424  
2024/03/01 14:30:00 - mmengine - INFO - Iter(val) [7350/9234]    eta: 0:00:58  time: 0.0297  data_time: 0.0012  memory: 424  
2024/03/01 14:30:01 - mmengine - INFO - Iter(val) [7400/9234]    eta: 0:00:56  time: 0.0297  data_time: 0.0012  memory: 424  
2024/03/01 14:30:02 - mmengine - INFO - Iter(val) [7450/9234]    eta: 0:00:55  time: 0.0198  data_time: 0.0010  memory: 424  
2024/03/01 14:30:04 - mmengine - INFO - Iter(val) [7500/9234]    eta: 0:00:53  time: 0.0238  data_time: 0.0011  memory: 424  
2024/03/01 14:30:05 - mmengine - INFO - Iter(val) [7550/9234]    eta: 0:00:51  time: 0.0233  data_time: 0.0011  memory: 424  
2024/03/01 14:30:06 - mmengine - INFO - Iter(val) [7600/9234]    eta: 0:00:50  time: 0.0267  data_time: 0.0011  memory: 424  
2024/03/01 14:30:07 - mmengine - INFO - Iter(val) [7650/9234]    eta: 0:00:48  time: 0.0234  data_time: 0.0010  memory: 424  
2024/03/01 14:30:09 - mmengine - INFO - Iter(val) [7700/9234]    eta: 0:00:47  time: 0.0267  data_time: 0.0014  memory: 424  
2024/03/01 14:30:10 - mmengine - INFO - Iter(val) [7750/9234]    eta: 0:00:45  time: 0.0247  data_time: 0.0012  memory: 424  
2024/03/01 14:30:11 - mmengine - INFO - Iter(val) [7800/9234]    eta: 0:00:43  time: 0.0281  data_time: 0.0012  memory: 424  
2024/03/01 14:30:12 - mmengine - INFO - Iter(val) [7850/9234]    eta: 0:00:42  time: 0.0201  data_time: 0.0011  memory: 424  
2024/03/01 14:30:13 - mmengine - INFO - Iter(val) [7900/9234]    eta: 0:00:40  time: 0.0201  data_time: 0.0012  memory: 424  
2024/03/01 14:30:14 - mmengine - INFO - Iter(val) [7950/9234]    eta: 0:00:39  time: 0.0197  data_time: 0.0010  memory: 424  
2024/03/01 14:30:15 - mmengine - INFO - Iter(val) [8000/9234]    eta: 0:00:37  time: 0.0209  data_time: 0.0010  memory: 424  
2024/03/01 14:30:16 - mmengine - INFO - Iter(val) [8050/9234]    eta: 0:00:35  time: 0.0184  data_time: 0.0009  memory: 424  
2024/03/01 14:30:17 - mmengine - INFO - Iter(val) [8100/9234]    eta: 0:00:34  time: 0.0206  data_time: 0.0011  memory: 424  
2024/03/01 14:30:18 - mmengine - INFO - Iter(val) [8150/9234]    eta: 0:00:32  time: 0.0206  data_time: 0.0012  memory: 424  
2024/03/01 14:30:19 - mmengine - INFO - Iter(val) [8200/9234]    eta: 0:00:31  time: 0.0211  data_time: 0.0009  memory: 424  
2024/03/01 14:30:20 - mmengine - INFO - Iter(val) [8250/9234]    eta: 0:00:29  time: 0.0178  data_time: 0.0009  memory: 424  
2024/03/01 14:30:21 - mmengine - INFO - Iter(val) [8300/9234]    eta: 0:00:27  time: 0.0195  data_time: 0.0011  memory: 424  
2024/03/01 14:30:22 - mmengine - INFO - Iter(val) [8350/9234]    eta: 0:00:26  time: 0.0194  data_time: 0.0011  memory: 424  
2024/03/01 14:30:23 - mmengine - INFO - Iter(val) [8400/9234]    eta: 0:00:24  time: 0.0196  data_time: 0.0010  memory: 424  
2024/03/01 14:30:24 - mmengine - INFO - Iter(val) [8450/9234]    eta: 0:00:23  time: 0.0205  data_time: 0.0011  memory: 424  
2024/03/01 14:30:25 - mmengine - INFO - Iter(val) [8500/9234]    eta: 0:00:21  time: 0.0183  data_time: 0.0009  memory: 424  
2024/03/01 14:30:26 - mmengine - INFO - Iter(val) [8550/9234]    eta: 0:00:20  time: 0.0196  data_time: 0.0012  memory: 424  
2024/03/01 14:30:27 - mmengine - INFO - Iter(val) [8600/9234]    eta: 0:00:18  time: 0.0186  data_time: 0.0010  memory: 424  
2024/03/01 14:30:28 - mmengine - INFO - Iter(val) [8650/9234]    eta: 0:00:17  time: 0.0212  data_time: 0.0012  memory: 424  
2024/03/01 14:30:29 - mmengine - INFO - Iter(val) [8700/9234]    eta: 0:00:15  time: 0.0181  data_time: 0.0009  memory: 424  
2024/03/01 14:30:30 - mmengine - INFO - Iter(val) [8750/9234]    eta: 0:00:14  time: 0.0189  data_time: 0.0010  memory: 424  
2024/03/01 14:30:31 - mmengine - INFO - Iter(val) [8800/9234]    eta: 0:00:12  time: 0.0193  data_time: 0.0011  memory: 424  
2024/03/01 14:30:32 - mmengine - INFO - Iter(val) [8850/9234]    eta: 0:00:11  time: 0.0178  data_time: 0.0009  memory: 424  
2024/03/01 14:30:33 - mmengine - INFO - Iter(val) [8900/9234]    eta: 0:00:09  time: 0.0215  data_time: 0.0010  memory: 424  
2024/03/01 14:30:34 - mmengine - INFO - Iter(val) [8950/9234]    eta: 0:00:08  time: 0.0175  data_time: 0.0009  memory: 424  
2024/03/01 14:30:35 - mmengine - INFO - Iter(val) [9000/9234]    eta: 0:00:06  time: 0.0187  data_time: 0.0011  memory: 424  
2024/03/01 14:30:36 - mmengine - INFO - Iter(val) [9050/9234]    eta: 0:00:05  time: 0.0182  data_time: 0.0010  memory: 424  
2024/03/01 14:30:37 - mmengine - INFO - Iter(val) [9100/9234]    eta: 0:00:03  time: 0.0208  data_time: 0.0011  memory: 424  
2024/03/01 14:30:38 - mmengine - INFO - Iter(val) [9150/9234]    eta: 0:00:02  time: 0.0175  data_time: 0.0009  memory: 424  
2024/03/01 14:30:39 - mmengine - INFO - Iter(val) [9200/9234]    eta: 0:00:00  time: 0.0187  data_time: 0.0010  memory: 424  
2024/03/01 14:33:16 - mmengine - INFO - Iter(val) [9234/9234]    reid-metric/mAP: 0.5130  reid-metric/R1: 0.9800  reid-metric/R5: 0.9950  reid-metric/R10: 0.9960  reid-metric/R20: 0.9970  data_time: 0.0013  time: 0.0289
2024/03/01 14:33:16 - mmengine - INFO - The previous best checkpoint /home/kzy/project/mmdetection/experiments/enc_b32/best_reid-metric_mAP_iter_2000.pth is removed
2024/03/01 14:33:17 - mmengine - INFO - The best checkpoint with 0.5130 reid-metric/mAP at 3000 iter is saved to best_reid-metric_mAP_iter_3000.pth.
2024/03/01 14:33:28 - mmengine - INFO - Iter(train) [  3050/140000]  lr: 1.0000e-02  eta: 17:41:51  time: 3.3780  data_time: 3.1850  memory: 7197  loss: 1.0546  triplet_loss: 0.1863  ce_loss: 0.8683  accuracy_top-1: 59.3750
2024/03/01 14:33:38 - mmengine - INFO - Iter(train) [  3100/140000]  lr: 1.0000e-02  eta: 17:31:44  time: 0.2008  data_time: 0.0093  memory: 7197  loss: 1.0597  triplet_loss: 0.1905  ce_loss: 0.8692  accuracy_top-1: 64.0625
2024/03/01 14:33:48 - mmengine - INFO - Iter(train) [  3150/140000]  lr: 1.0000e-02  eta: 17:21:53  time: 0.1992  data_time: 0.0083  memory: 7197  loss: 1.0968  triplet_loss: 0.1940  ce_loss: 0.9028  accuracy_top-1: 73.4375
2024/03/01 14:33:58 - mmengine - INFO - Iter(train) [  3200/140000]  lr: 1.0000e-02  eta: 17:12:25  time: 0.2019  data_time: 0.0089  memory: 7197  loss: 1.0111  triplet_loss: 0.1890  ce_loss: 0.8221  accuracy_top-1: 81.2500
2024/03/01 14:34:14 - mmengine - INFO - Iter(train) [  3250/140000]  lr: 1.0000e-02  eta: 17:07:16  time: 0.3170  data_time: 0.0086  memory: 7197  loss: 0.9859  triplet_loss: 0.1661  ce_loss: 0.8198  accuracy_top-1: 79.6875
2024/03/01 14:34:24 - mmengine - INFO - Iter(train) [  3300/140000]  lr: 1.0000e-02  eta: 16:58:14  time: 0.1995  data_time: 0.0086  memory: 7197  loss: 0.9206  triplet_loss: 0.1595  ce_loss: 0.7611  accuracy_top-1: 84.3750
2024/03/01 14:34:34 - mmengine - INFO - Iter(train) [  3350/140000]  lr: 1.0000e-02  eta: 16:49:32  time: 0.2022  data_time: 0.0088  memory: 7197  loss: 1.0200  triplet_loss: 0.1970  ce_loss: 0.8230  accuracy_top-1: 78.1250
2024/03/01 14:34:44 - mmengine - INFO - Iter(train) [  3400/140000]  lr: 1.0000e-02  eta: 16:40:56  time: 0.1976  data_time: 0.0082  memory: 7197  loss: 0.9938  triplet_loss: 0.1739  ce_loss: 0.8199  accuracy_top-1: 79.6875
2024/03/01 14:34:54 - mmengine - INFO - Iter(train) [  3450/140000]  lr: 1.0000e-02  eta: 16:32:38  time: 0.1990  data_time: 0.0084  memory: 7197  loss: 0.8259  triplet_loss: 0.1291  ce_loss: 0.6968  accuracy_top-1: 67.1875
2024/03/01 14:35:06 - mmengine - INFO - Iter(train) [  3500/140000]  lr: 1.0000e-02  eta: 16:25:58  time: 0.2424  data_time: 0.0082  memory: 7197  loss: 0.9031  triplet_loss: 0.1548  ce_loss: 0.7484  accuracy_top-1: 70.3125
2024/03/01 14:35:20 - mmengine - INFO - Iter(train) [  3550/140000]  lr: 1.0000e-02  eta: 16:20:25  time: 0.2714  data_time: 0.0090  memory: 7197  loss: 0.7712  triplet_loss: 0.1409  ce_loss: 0.6303  accuracy_top-1: 90.6250
2024/03/01 14:35:30 - mmengine - INFO - Iter(train) [  3600/140000]  lr: 1.0000e-02  eta: 16:12:44  time: 0.1988  data_time: 0.0086  memory: 7197  loss: 0.8858  triplet_loss: 0.1782  ce_loss: 0.7076  accuracy_top-1: 84.3750
2024/03/01 14:35:40 - mmengine - INFO - Iter(train) [  3650/140000]  lr: 1.0000e-02  eta: 16:05:15  time: 0.1992  data_time: 0.0085  memory: 7197  loss: 0.8566  triplet_loss: 0.1615  ce_loss: 0.6952  accuracy_top-1: 65.6250
2024/03/01 14:35:50 - mmengine - INFO - Iter(train) [  3700/140000]  lr: 1.0000e-02  eta: 15:57:55  time: 0.1971  data_time: 0.0080  memory: 7197  loss: 0.8845  triplet_loss: 0.1861  ce_loss: 0.6984  accuracy_top-1: 71.8750
2024/03/01 14:35:59 - mmengine - INFO - Iter(train) [  3750/140000]  lr: 1.0000e-02  eta: 15:50:44  time: 0.1963  data_time: 0.0080  memory: 7197  loss: 0.8283  triplet_loss: 0.1605  ce_loss: 0.6678  accuracy_top-1: 82.8125
2024/03/01 14:36:13 - mmengine - INFO - Iter(train) [  3800/140000]  lr: 1.0000e-02  eta: 15:45:56  time: 0.2696  data_time: 0.0079  memory: 7197  loss: 0.7348  triplet_loss: 0.1126  ce_loss: 0.6222  accuracy_top-1: 92.1875
2024/03/01 14:36:23 - mmengine - INFO - Iter(train) [  3850/140000]  lr: 1.0000e-02  eta: 15:39:08  time: 0.1975  data_time: 0.0076  memory: 7197  loss: 0.7339  triplet_loss: 0.1464  ce_loss: 0.5874  accuracy_top-1: 79.6875
2024/03/01 14:36:33 - mmengine - INFO - Iter(train) [  3900/140000]  lr: 1.0000e-02  eta: 15:32:29  time: 0.1975  data_time: 0.0075  memory: 7197  loss: 0.8594  triplet_loss: 0.1991  ce_loss: 0.6603  accuracy_top-1: 84.3750
2024/03/01 14:36:43 - mmengine - INFO - Iter(train) [  3950/140000]  lr: 1.0000e-02  eta: 15:26:02  time: 0.1981  data_time: 0.0074  memory: 7197  loss: 0.7673  triplet_loss: 0.1602  ce_loss: 0.6071  accuracy_top-1: 87.5000
2024/03/01 14:36:53 - mmengine - INFO - Exp name: reid_testmodel_20240301_135802
2024/03/01 14:36:53 - mmengine - INFO - Iter(train) [  4000/140000]  lr: 1.0000e-02  eta: 15:19:47  time: 0.1996  data_time: 0.0070  memory: 7197  loss: 0.7547  triplet_loss: 0.1407  ce_loss: 0.6140  accuracy_top-1: 79.6875
2024/03/01 14:36:53 - mmengine - INFO - Saving checkpoint at 4000 iterations
2024/03/01 14:36:55 - mmengine - INFO - Iter(val) [  50/9234]    eta: 0:03:24  time: 0.0222  data_time: 0.0012  memory: 424  
2024/03/01 14:36:56 - mmengine - INFO - Iter(val) [ 100/9234]    eta: 0:03:05  time: 0.0185  data_time: 0.0010  memory: 424  
2024/03/01 14:36:57 - mmengine - INFO - Iter(val) [ 150/9234]    eta: 0:03:03  time: 0.0200  data_time: 0.0011  memory: 424  
2024/03/01 14:36:58 - mmengine - INFO - Iter(val) [ 200/9234]    eta: 0:02:59  time: 0.0186  data_time: 0.0011  memory: 424  
2024/03/01 14:36:59 - mmengine - INFO - Iter(val) [ 250/9234]    eta: 0:03:00  time: 0.0214  data_time: 0.0011  memory: 424  
2024/03/01 14:37:00 - mmengine - INFO - Iter(val) [ 300/9234]    eta: 0:02:58  time: 0.0192  data_time: 0.0011  memory: 424  
2024/03/01 14:37:01 - mmengine - INFO - Iter(val) [ 350/9234]    eta: 0:02:57  time: 0.0197  data_time: 0.0011  memory: 424  
2024/03/01 14:37:02 - mmengine - INFO - Iter(val) [ 400/9234]    eta: 0:02:56  time: 0.0200  data_time: 0.0012  memory: 424  
2024/03/01 14:37:03 - mmengine - INFO - Iter(val) [ 450/9234]    eta: 0:02:59  time: 0.0239  data_time: 0.0011  memory: 424  
2024/03/01 14:37:04 - mmengine - INFO - Iter(val) [ 500/9234]    eta: 0:03:03  time: 0.0262  data_time: 0.0011  memory: 424  
2024/03/01 14:37:05 - mmengine - INFO - Iter(val) [ 550/9234]    eta: 0:03:05  time: 0.0252  data_time: 0.0012  memory: 424  
2024/03/01 14:37:07 - mmengine - INFO - Iter(val) [ 600/9234]    eta: 0:03:05  time: 0.0233  data_time: 0.0011  memory: 424  
2024/03/01 14:37:08 - mmengine - INFO - Iter(val) [ 650/9234]    eta: 0:03:08  time: 0.0267  data_time: 0.0013  memory: 424  
2024/03/01 14:37:09 - mmengine - INFO - Iter(val) [ 700/9234]    eta: 0:03:08  time: 0.0250  data_time: 0.0011  memory: 424  
2024/03/01 14:37:10 - mmengine - INFO - Iter(val) [ 750/9234]    eta: 0:03:08  time: 0.0241  data_time: 0.0011  memory: 424  
2024/03/01 14:37:12 - mmengine - INFO - Iter(val) [ 800/9234]    eta: 0:03:08  time: 0.0230  data_time: 0.0011  memory: 424  
2024/03/01 14:37:13 - mmengine - INFO - Iter(val) [ 850/9234]    eta: 0:03:06  time: 0.0218  data_time: 0.0011  memory: 424  
2024/03/01 14:37:14 - mmengine - INFO - Iter(val) [ 900/9234]    eta: 0:03:04  time: 0.0194  data_time: 0.0011  memory: 424  
2024/03/01 14:37:15 - mmengine - INFO - Iter(val) [ 950/9234]    eta: 0:03:02  time: 0.0216  data_time: 0.0012  memory: 424  
2024/03/01 14:37:16 - mmengine - INFO - Iter(val) [1000/9234]    eta: 0:03:00  time: 0.0191  data_time: 0.0011  memory: 424  
2024/03/01 14:37:17 - mmengine - INFO - Iter(val) [1050/9234]    eta: 0:02:59  time: 0.0227  data_time: 0.0011  memory: 424  
2024/03/01 14:37:18 - mmengine - INFO - Iter(val) [1100/9234]    eta: 0:02:57  time: 0.0199  data_time: 0.0011  memory: 424  
2024/03/01 14:37:19 - mmengine - INFO - Iter(val) [1150/9234]    eta: 0:02:56  time: 0.0198  data_time: 0.0011  memory: 424  
2024/03/01 14:37:20 - mmengine - INFO - Iter(val) [1200/9234]    eta: 0:02:54  time: 0.0187  data_time: 0.0010  memory: 424  
2024/03/01 14:37:21 - mmengine - INFO - Iter(val) [1250/9234]    eta: 0:02:52  time: 0.0191  data_time: 0.0012  memory: 424  
2024/03/01 14:37:22 - mmengine - INFO - Iter(val) [1300/9234]    eta: 0:02:53  time: 0.0287  data_time: 0.0013  memory: 424  
2024/03/01 14:37:24 - mmengine - INFO - Iter(val) [1350/9234]    eta: 0:02:53  time: 0.0279  data_time: 0.0015  memory: 424  
2024/03/01 14:37:25 - mmengine - INFO - Iter(val) [1400/9234]    eta: 0:02:54  time: 0.0274  data_time: 0.0013  memory: 424  
2024/03/01 14:37:27 - mmengine - INFO - Iter(val) [1450/9234]    eta: 0:02:55  time: 0.0302  data_time: 0.0014  memory: 424  
2024/03/01 14:37:28 - mmengine - INFO - Iter(val) [1500/9234]    eta: 0:02:56  time: 0.0315  data_time: 0.0014  memory: 424  
2024/03/01 14:37:30 - mmengine - INFO - Iter(val) [1550/9234]    eta: 0:02:57  time: 0.0315  data_time: 0.0014  memory: 424  
2024/03/01 14:37:31 - mmengine - INFO - Iter(val) [1600/9234]    eta: 0:02:58  time: 0.0299  data_time: 0.0014  memory: 424  
2024/03/01 14:37:33 - mmengine - INFO - Iter(val) [1650/9234]    eta: 0:02:58  time: 0.0296  data_time: 0.0013  memory: 424  
2024/03/01 14:37:34 - mmengine - INFO - Iter(val) [1700/9234]    eta: 0:02:58  time: 0.0309  data_time: 0.0014  memory: 424  
2024/03/01 14:37:36 - mmengine - INFO - Iter(val) [1750/9234]    eta: 0:02:59  time: 0.0321  data_time: 0.0014  memory: 424  
2024/03/01 14:37:37 - mmengine - INFO - Iter(val) [1800/9234]    eta: 0:02:59  time: 0.0315  data_time: 0.0015  memory: 424  
2024/03/01 14:37:39 - mmengine - INFO - Iter(val) [1850/9234]    eta: 0:02:59  time: 0.0315  data_time: 0.0013  memory: 424  
2024/03/01 14:37:41 - mmengine - INFO - Iter(val) [1900/9234]    eta: 0:02:59  time: 0.0302  data_time: 0.0014  memory: 424  
2024/03/01 14:37:42 - mmengine - INFO - Iter(val) [1950/9234]    eta: 0:03:00  time: 0.0323  data_time: 0.0013  memory: 424  
2024/03/01 14:37:44 - mmengine - INFO - Iter(val) [2000/9234]    eta: 0:02:59  time: 0.0309  data_time: 0.0013  memory: 424  
2024/03/01 14:37:45 - mmengine - INFO - Iter(val) [2050/9234]    eta: 0:02:59  time: 0.0304  data_time: 0.0013  memory: 424  
2024/03/01 14:37:47 - mmengine - INFO - Iter(val) [2100/9234]    eta: 0:02:59  time: 0.0317  data_time: 0.0013  memory: 424  
2024/03/01 14:37:48 - mmengine - INFO - Iter(val) [2150/9234]    eta: 0:02:59  time: 0.0304  data_time: 0.0013  memory: 424  
2024/03/01 14:37:50 - mmengine - INFO - Iter(val) [2200/9234]    eta: 0:02:59  time: 0.0325  data_time: 0.0014  memory: 424  
2024/03/01 14:37:52 - mmengine - INFO - Iter(val) [2250/9234]    eta: 0:02:58  time: 0.0303  data_time: 0.0014  memory: 424  
2024/03/01 14:37:53 - mmengine - INFO - Iter(val) [2300/9234]    eta: 0:02:58  time: 0.0312  data_time: 0.0013  memory: 424  
2024/03/01 14:37:55 - mmengine - INFO - Iter(val) [2350/9234]    eta: 0:02:57  time: 0.0313  data_time: 0.0013  memory: 424  
2024/03/01 14:37:56 - mmengine - INFO - Iter(val) [2400/9234]    eta: 0:02:57  time: 0.0306  data_time: 0.0014  memory: 424  
2024/03/01 14:37:58 - mmengine - INFO - Iter(val) [2450/9234]    eta: 0:02:56  time: 0.0303  data_time: 0.0013  memory: 424  
2024/03/01 14:37:59 - mmengine - INFO - Iter(val) [2500/9234]    eta: 0:02:55  time: 0.0306  data_time: 0.0013  memory: 424  
2024/03/01 14:38:01 - mmengine - INFO - Iter(val) [2550/9234]    eta: 0:02:55  time: 0.0311  data_time: 0.0013  memory: 424  
2024/03/01 14:38:03 - mmengine - INFO - Iter(val) [2600/9234]    eta: 0:02:54  time: 0.0320  data_time: 0.0016  memory: 424  
2024/03/01 14:38:04 - mmengine - INFO - Iter(val) [2650/9234]    eta: 0:02:54  time: 0.0359  data_time: 0.0014  memory: 424  
2024/03/01 14:38:06 - mmengine - INFO - Iter(val) [2700/9234]    eta: 0:02:54  time: 0.0380  data_time: 0.0014  memory: 424  
2024/03/01 14:38:08 - mmengine - INFO - Iter(val) [2750/9234]    eta: 0:02:54  time: 0.0384  data_time: 0.0014  memory: 424  
2024/03/01 14:38:10 - mmengine - INFO - Iter(val) [2800/9234]    eta: 0:02:54  time: 0.0372  data_time: 0.0017  memory: 424  
2024/03/01 14:38:12 - mmengine - INFO - Iter(val) [2850/9234]    eta: 0:02:54  time: 0.0377  data_time: 0.0014  memory: 424  
2024/03/01 14:38:14 - mmengine - INFO - Iter(val) [2900/9234]    eta: 0:02:53  time: 0.0333  data_time: 0.0013  memory: 424  
2024/03/01 14:38:15 - mmengine - INFO - Iter(val) [2950/9234]    eta: 0:02:52  time: 0.0311  data_time: 0.0013  memory: 424  
2024/03/01 14:38:17 - mmengine - INFO - Iter(val) [3000/9234]    eta: 0:02:51  time: 0.0306  data_time: 0.0013  memory: 424  
2024/03/01 14:38:18 - mmengine - INFO - Iter(val) [3050/9234]    eta: 0:02:50  time: 0.0316  data_time: 0.0014  memory: 424  
2024/03/01 14:38:20 - mmengine - INFO - Iter(val) [3100/9234]    eta: 0:02:49  time: 0.0321  data_time: 0.0013  memory: 424  
2024/03/01 14:38:22 - mmengine - INFO - Iter(val) [3150/9234]    eta: 0:02:48  time: 0.0317  data_time: 0.0013  memory: 424  
2024/03/01 14:38:23 - mmengine - INFO - Iter(val) [3200/9234]    eta: 0:02:47  time: 0.0316  data_time: 0.0013  memory: 424  
2024/03/01 14:38:25 - mmengine - INFO - Iter(val) [3250/9234]    eta: 0:02:46  time: 0.0310  data_time: 0.0013  memory: 424  
2024/03/01 14:38:26 - mmengine - INFO - Iter(val) [3300/9234]    eta: 0:02:45  time: 0.0318  data_time: 0.0013  memory: 424  
2024/03/01 14:38:28 - mmengine - INFO - Iter(val) [3350/9234]    eta: 0:02:44  time: 0.0295  data_time: 0.0012  memory: 424  
2024/03/01 14:38:29 - mmengine - INFO - Iter(val) [3400/9234]    eta: 0:02:43  time: 0.0321  data_time: 0.0013  memory: 424  
2024/03/01 14:38:31 - mmengine - INFO - Iter(val) [3450/9234]    eta: 0:02:42  time: 0.0318  data_time: 0.0014  memory: 424  
2024/03/01 14:38:33 - mmengine - INFO - Iter(val) [3500/9234]    eta: 0:02:40  time: 0.0311  data_time: 0.0013  memory: 424  
2024/03/01 14:38:34 - mmengine - INFO - Iter(val) [3550/9234]    eta: 0:02:39  time: 0.0316  data_time: 0.0013  memory: 424  
2024/03/01 14:38:36 - mmengine - INFO - Iter(val) [3600/9234]    eta: 0:02:38  time: 0.0331  data_time: 0.0014  memory: 424  
2024/03/01 14:38:38 - mmengine - INFO - Iter(val) [3650/9234]    eta: 0:02:37  time: 0.0322  data_time: 0.0014  memory: 424  
2024/03/01 14:38:39 - mmengine - INFO - Iter(val) [3700/9234]    eta: 0:02:36  time: 0.0318  data_time: 0.0013  memory: 424  
2024/03/01 14:38:41 - mmengine - INFO - Iter(val) [3750/9234]    eta: 0:02:35  time: 0.0310  data_time: 0.0013  memory: 424  
2024/03/01 14:38:42 - mmengine - INFO - Iter(val) [3800/9234]    eta: 0:02:34  time: 0.0310  data_time: 0.0013  memory: 424  
2024/03/01 14:38:44 - mmengine - INFO - Iter(val) [3850/9234]    eta: 0:02:32  time: 0.0316  data_time: 0.0014  memory: 424  
2024/03/01 14:38:45 - mmengine - INFO - Iter(val) [3900/9234]    eta: 0:02:31  time: 0.0307  data_time: 0.0014  memory: 424  
2024/03/01 14:38:47 - mmengine - INFO - Iter(val) [3950/9234]    eta: 0:02:30  time: 0.0302  data_time: 0.0013  memory: 424  
2024/03/01 14:38:48 - mmengine - INFO - Iter(val) [4000/9234]    eta: 0:02:29  time: 0.0310  data_time: 0.0014  memory: 424  
2024/03/01 14:38:50 - mmengine - INFO - Iter(val) [4050/9234]    eta: 0:02:27  time: 0.0326  data_time: 0.0014  memory: 424  
2024/03/01 14:38:52 - mmengine - INFO - Iter(val) [4100/9234]    eta: 0:02:26  time: 0.0321  data_time: 0.0014  memory: 424  
2024/03/01 14:38:53 - mmengine - INFO - Iter(val) [4150/9234]    eta: 0:02:25  time: 0.0306  data_time: 0.0014  memory: 424  
2024/03/01 14:38:55 - mmengine - INFO - Iter(val) [4200/9234]    eta: 0:02:24  time: 0.0315  data_time: 0.0013  memory: 424  
2024/03/01 14:38:56 - mmengine - INFO - Iter(val) [4250/9234]    eta: 0:02:22  time: 0.0310  data_time: 0.0014  memory: 424  
2024/03/01 14:38:58 - mmengine - INFO - Iter(val) [4300/9234]    eta: 0:02:21  time: 0.0291  data_time: 0.0013  memory: 424  
2024/03/01 14:38:59 - mmengine - INFO - Iter(val) [4350/9234]    eta: 0:02:20  time: 0.0293  data_time: 0.0013  memory: 424  
2024/03/01 14:39:01 - mmengine - INFO - Iter(val) [4400/9234]    eta: 0:02:18  time: 0.0311  data_time: 0.0014  memory: 424  
2024/03/01 14:39:03 - mmengine - INFO - Iter(val) [4450/9234]    eta: 0:02:17  time: 0.0309  data_time: 0.0013  memory: 424  
2024/03/01 14:39:04 - mmengine - INFO - Iter(val) [4500/9234]    eta: 0:02:16  time: 0.0347  data_time: 0.0014  memory: 424  
2024/03/01 14:39:06 - mmengine - INFO - Iter(val) [4550/9234]    eta: 0:02:15  time: 0.0349  data_time: 0.0015  memory: 424  
2024/03/01 14:39:08 - mmengine - INFO - Iter(val) [4600/9234]    eta: 0:02:14  time: 0.0348  data_time: 0.0016  memory: 424  
2024/03/01 14:39:10 - mmengine - INFO - Iter(val) [4650/9234]    eta: 0:02:12  time: 0.0352  data_time: 0.0014  memory: 424  
2024/03/01 14:39:11 - mmengine - INFO - Iter(val) [4700/9234]    eta: 0:02:11  time: 0.0332  data_time: 0.0015  memory: 424  
2024/03/01 14:39:13 - mmengine - INFO - Iter(val) [4750/9234]    eta: 0:02:10  time: 0.0305  data_time: 0.0014  memory: 424  
2024/03/01 14:39:14 - mmengine - INFO - Iter(val) [4800/9234]    eta: 0:02:08  time: 0.0297  data_time: 0.0016  memory: 424  
2024/03/01 14:39:16 - mmengine - INFO - Iter(val) [4850/9234]    eta: 0:02:07  time: 0.0297  data_time: 0.0013  memory: 424  
2024/03/01 14:39:17 - mmengine - INFO - Iter(val) [4900/9234]    eta: 0:02:06  time: 0.0303  data_time: 0.0014  memory: 424  
2024/03/01 14:39:19 - mmengine - INFO - Iter(val) [4950/9234]    eta: 0:02:04  time: 0.0309  data_time: 0.0014  memory: 424  
2024/03/01 14:39:20 - mmengine - INFO - Iter(val) [5000/9234]    eta: 0:02:03  time: 0.0312  data_time: 0.0014  memory: 424  
2024/03/01 14:39:22 - mmengine - INFO - Iter(val) [5050/9234]    eta: 0:02:01  time: 0.0318  data_time: 0.0015  memory: 424  
2024/03/01 14:39:24 - mmengine - INFO - Iter(val) [5100/9234]    eta: 0:02:00  time: 0.0291  data_time: 0.0012  memory: 424  
2024/03/01 14:39:25 - mmengine - INFO - Iter(val) [5150/9234]    eta: 0:01:58  time: 0.0247  data_time: 0.0008  memory: 424  
2024/03/01 14:39:26 - mmengine - INFO - Iter(val) [5200/9234]    eta: 0:01:57  time: 0.0251  data_time: 0.0009  memory: 424  
2024/03/01 14:39:27 - mmengine - INFO - Iter(val) [5250/9234]    eta: 0:01:55  time: 0.0261  data_time: 0.0009  memory: 424  
2024/03/01 14:39:29 - mmengine - INFO - Iter(val) [5300/9234]    eta: 0:01:54  time: 0.0270  data_time: 0.0012  memory: 424  
2024/03/01 14:39:30 - mmengine - INFO - Iter(val) [5350/9234]    eta: 0:01:52  time: 0.0276  data_time: 0.0013  memory: 424  
2024/03/01 14:39:31 - mmengine - INFO - Iter(val) [5400/9234]    eta: 0:01:51  time: 0.0273  data_time: 0.0011  memory: 424  
2024/03/01 14:39:33 - mmengine - INFO - Iter(val) [5450/9234]    eta: 0:01:49  time: 0.0282  data_time: 0.0013  memory: 424  
2024/03/01 14:39:34 - mmengine - INFO - Iter(val) [5500/9234]    eta: 0:01:48  time: 0.0286  data_time: 0.0013  memory: 424  
2024/03/01 14:39:36 - mmengine - INFO - Iter(val) [5550/9234]    eta: 0:01:46  time: 0.0280  data_time: 0.0012  memory: 424  
2024/03/01 14:39:37 - mmengine - INFO - Iter(val) [5600/9234]    eta: 0:01:45  time: 0.0285  data_time: 0.0012  memory: 424  
2024/03/01 14:39:39 - mmengine - INFO - Iter(val) [5650/9234]    eta: 0:01:43  time: 0.0291  data_time: 0.0012  memory: 424  
2024/03/01 14:39:40 - mmengine - INFO - Iter(val) [5700/9234]    eta: 0:01:42  time: 0.0270  data_time: 0.0011  memory: 424  
2024/03/01 14:39:41 - mmengine - INFO - Iter(val) [5750/9234]    eta: 0:01:40  time: 0.0292  data_time: 0.0012  memory: 424  
2024/03/01 14:39:43 - mmengine - INFO - Iter(val) [5800/9234]    eta: 0:01:39  time: 0.0288  data_time: 0.0011  memory: 424  
2024/03/01 14:39:44 - mmengine - INFO - Iter(val) [5850/9234]    eta: 0:01:37  time: 0.0273  data_time: 0.0010  memory: 424  
2024/03/01 14:39:46 - mmengine - INFO - Iter(val) [5900/9234]    eta: 0:01:36  time: 0.0277  data_time: 0.0010  memory: 424  
2024/03/01 14:39:47 - mmengine - INFO - Iter(val) [5950/9234]    eta: 0:01:34  time: 0.0273  data_time: 0.0010  memory: 424  
2024/03/01 14:39:49 - mmengine - INFO - Iter(val) [6000/9234]    eta: 0:01:33  time: 0.0286  data_time: 0.0012  memory: 424  
2024/03/01 14:39:50 - mmengine - INFO - Iter(val) [6050/9234]    eta: 0:01:32  time: 0.0292  data_time: 0.0012  memory: 424  
2024/03/01 14:39:51 - mmengine - INFO - Iter(val) [6100/9234]    eta: 0:01:30  time: 0.0282  data_time: 0.0011  memory: 424  
2024/03/01 14:39:53 - mmengine - INFO - Iter(val) [6150/9234]    eta: 0:01:29  time: 0.0272  data_time: 0.0011  memory: 424  
2024/03/01 14:39:54 - mmengine - INFO - Iter(val) [6200/9234]    eta: 0:01:27  time: 0.0282  data_time: 0.0012  memory: 424  
2024/03/01 14:39:56 - mmengine - INFO - Iter(val) [6250/9234]    eta: 0:01:26  time: 0.0287  data_time: 0.0012  memory: 424  
2024/03/01 14:39:57 - mmengine - INFO - Iter(val) [6300/9234]    eta: 0:01:24  time: 0.0287  data_time: 0.0012  memory: 424  
2024/03/01 14:39:59 - mmengine - INFO - Iter(val) [6350/9234]    eta: 0:01:23  time: 0.0293  data_time: 0.0013  memory: 424  
2024/03/01 14:40:00 - mmengine - INFO - Iter(val) [6400/9234]    eta: 0:01:21  time: 0.0288  data_time: 0.0012  memory: 424  
2024/03/01 14:40:01 - mmengine - INFO - Iter(val) [6450/9234]    eta: 0:01:20  time: 0.0276  data_time: 0.0011  memory: 424  
2024/03/01 14:40:03 - mmengine - INFO - Iter(val) [6500/9234]    eta: 0:01:18  time: 0.0296  data_time: 0.0011  memory: 424  
2024/03/01 14:40:05 - mmengine - INFO - Iter(val) [6550/9234]    eta: 0:01:17  time: 0.0323  data_time: 0.0013  memory: 424  
2024/03/01 14:40:06 - mmengine - INFO - Iter(val) [6600/9234]    eta: 0:01:16  time: 0.0330  data_time: 0.0012  memory: 424  
2024/03/01 14:40:08 - mmengine - INFO - Iter(val) [6650/9234]    eta: 0:01:14  time: 0.0326  data_time: 0.0012  memory: 424  
2024/03/01 14:40:10 - mmengine - INFO - Iter(val) [6700/9234]    eta: 0:01:13  time: 0.0344  data_time: 0.0013  memory: 424  
2024/03/01 14:40:11 - mmengine - INFO - Iter(val) [6750/9234]    eta: 0:01:12  time: 0.0339  data_time: 0.0013  memory: 424  
2024/03/01 14:40:13 - mmengine - INFO - Iter(val) [6800/9234]    eta: 0:01:10  time: 0.0303  data_time: 0.0012  memory: 424  
2024/03/01 14:40:14 - mmengine - INFO - Iter(val) [6850/9234]    eta: 0:01:09  time: 0.0279  data_time: 0.0012  memory: 424  
2024/03/01 14:40:16 - mmengine - INFO - Iter(val) [6900/9234]    eta: 0:01:07  time: 0.0283  data_time: 0.0011  memory: 424  
2024/03/01 14:40:17 - mmengine - INFO - Iter(val) [6950/9234]    eta: 0:01:06  time: 0.0303  data_time: 0.0012  memory: 424  
2024/03/01 14:40:19 - mmengine - INFO - Iter(val) [7000/9234]    eta: 0:01:04  time: 0.0277  data_time: 0.0012  memory: 424  
2024/03/01 14:40:20 - mmengine - INFO - Iter(val) [7050/9234]    eta: 0:01:03  time: 0.0281  data_time: 0.0012  memory: 424  
2024/03/01 14:40:21 - mmengine - INFO - Iter(val) [7100/9234]    eta: 0:01:01  time: 0.0288  data_time: 0.0012  memory: 424  
2024/03/01 14:40:23 - mmengine - INFO - Iter(val) [7150/9234]    eta: 0:01:00  time: 0.0279  data_time: 0.0011  memory: 424  
2024/03/01 14:40:24 - mmengine - INFO - Iter(val) [7200/9234]    eta: 0:00:58  time: 0.0275  data_time: 0.0012  memory: 424  
2024/03/01 14:40:26 - mmengine - INFO - Iter(val) [7250/9234]    eta: 0:00:57  time: 0.0298  data_time: 0.0012  memory: 424  
2024/03/01 14:40:27 - mmengine - INFO - Iter(val) [7300/9234]    eta: 0:00:56  time: 0.0288  data_time: 0.0013  memory: 424  
2024/03/01 14:40:29 - mmengine - INFO - Iter(val) [7350/9234]    eta: 0:00:54  time: 0.0290  data_time: 0.0013  memory: 424  
2024/03/01 14:40:30 - mmengine - INFO - Iter(val) [7400/9234]    eta: 0:00:53  time: 0.0291  data_time: 0.0012  memory: 424  
2024/03/01 14:40:32 - mmengine - INFO - Iter(val) [7450/9234]    eta: 0:00:51  time: 0.0284  data_time: 0.0012  memory: 424  
2024/03/01 14:40:33 - mmengine - INFO - Iter(val) [7500/9234]    eta: 0:00:50  time: 0.0285  data_time: 0.0012  memory: 424  
2024/03/01 14:40:34 - mmengine - INFO - Iter(val) [7550/9234]    eta: 0:00:48  time: 0.0285  data_time: 0.0012  memory: 424  
2024/03/01 14:40:36 - mmengine - INFO - Iter(val) [7600/9234]    eta: 0:00:47  time: 0.0277  data_time: 0.0012  memory: 424  
2024/03/01 14:40:37 - mmengine - INFO - Iter(val) [7650/9234]    eta: 0:00:45  time: 0.0291  data_time: 0.0012  memory: 424  
2024/03/01 14:40:39 - mmengine - INFO - Iter(val) [7700/9234]    eta: 0:00:44  time: 0.0285  data_time: 0.0013  memory: 424  
2024/03/01 14:40:40 - mmengine - INFO - Iter(val) [7750/9234]    eta: 0:00:43  time: 0.0301  data_time: 0.0014  memory: 424  
2024/03/01 14:40:42 - mmengine - INFO - Iter(val) [7800/9234]    eta: 0:00:41  time: 0.0294  data_time: 0.0013  memory: 424  
2024/03/01 14:40:43 - mmengine - INFO - Iter(val) [7850/9234]    eta: 0:00:40  time: 0.0294  data_time: 0.0015  memory: 424  
2024/03/01 14:40:45 - mmengine - INFO - Iter(val) [7900/9234]    eta: 0:00:38  time: 0.0293  data_time: 0.0012  memory: 424  
2024/03/01 14:40:46 - mmengine - INFO - Iter(val) [7950/9234]    eta: 0:00:37  time: 0.0301  data_time: 0.0012  memory: 424  
2024/03/01 14:40:48 - mmengine - INFO - Iter(val) [8000/9234]    eta: 0:00:35  time: 0.0290  data_time: 0.0014  memory: 424  
2024/03/01 14:40:49 - mmengine - INFO - Iter(val) [8050/9234]    eta: 0:00:34  time: 0.0263  data_time: 0.0011  memory: 424  
2024/03/01 14:40:50 - mmengine - INFO - Iter(val) [8100/9234]    eta: 0:00:32  time: 0.0279  data_time: 0.0012  memory: 424  
2024/03/01 14:40:52 - mmengine - INFO - Iter(val) [8150/9234]    eta: 0:00:31  time: 0.0283  data_time: 0.0012  memory: 424  
2024/03/01 14:40:53 - mmengine - INFO - Iter(val) [8200/9234]    eta: 0:00:29  time: 0.0282  data_time: 0.0012  memory: 424  
2024/03/01 14:40:55 - mmengine - INFO - Iter(val) [8250/9234]    eta: 0:00:28  time: 0.0302  data_time: 0.0013  memory: 424  
2024/03/01 14:40:56 - mmengine - INFO - Iter(val) [8300/9234]    eta: 0:00:27  time: 0.0297  data_time: 0.0013  memory: 424  
2024/03/01 14:40:58 - mmengine - INFO - Iter(val) [8350/9234]    eta: 0:00:25  time: 0.0299  data_time: 0.0013  memory: 424  
2024/03/01 14:40:59 - mmengine - INFO - Iter(val) [8400/9234]    eta: 0:00:24  time: 0.0298  data_time: 0.0013  memory: 424  
2024/03/01 14:41:01 - mmengine - INFO - Iter(val) [8450/9234]    eta: 0:00:22  time: 0.0286  data_time: 0.0012  memory: 424  
2024/03/01 14:41:02 - mmengine - INFO - Iter(val) [8500/9234]    eta: 0:00:21  time: 0.0282  data_time: 0.0012  memory: 424  
2024/03/01 14:41:04 - mmengine - INFO - Iter(val) [8550/9234]    eta: 0:00:19  time: 0.0354  data_time: 0.0013  memory: 424  
2024/03/01 14:41:06 - mmengine - INFO - Iter(val) [8600/9234]    eta: 0:00:18  time: 0.0346  data_time: 0.0013  memory: 424  
2024/03/01 14:41:08 - mmengine - INFO - Iter(val) [8650/9234]    eta: 0:00:16  time: 0.0355  data_time: 0.0013  memory: 424  
2024/03/01 14:41:09 - mmengine - INFO - Iter(val) [8700/9234]    eta: 0:00:15  time: 0.0345  data_time: 0.0013  memory: 424  
2024/03/01 14:41:11 - mmengine - INFO - Iter(val) [8750/9234]    eta: 0:00:14  time: 0.0342  data_time: 0.0013  memory: 424  
2024/03/01 14:41:13 - mmengine - INFO - Iter(val) [8800/9234]    eta: 0:00:12  time: 0.0349  data_time: 0.0013  memory: 424  
2024/03/01 14:41:14 - mmengine - INFO - Iter(val) [8850/9234]    eta: 0:00:11  time: 0.0298  data_time: 0.0012  memory: 424  
2024/03/01 14:41:16 - mmengine - INFO - Iter(val) [8900/9234]    eta: 0:00:09  time: 0.0285  data_time: 0.0012  memory: 424  
2024/03/01 14:41:17 - mmengine - INFO - Iter(val) [8950/9234]    eta: 0:00:08  time: 0.0266  data_time: 0.0010  memory: 424  
2024/03/01 14:41:18 - mmengine - INFO - Iter(val) [9000/9234]    eta: 0:00:06  time: 0.0265  data_time: 0.0010  memory: 424  
2024/03/01 14:41:20 - mmengine - INFO - Iter(val) [9050/9234]    eta: 0:00:05  time: 0.0267  data_time: 0.0010  memory: 424  
2024/03/01 14:41:21 - mmengine - INFO - Iter(val) [9100/9234]    eta: 0:00:03  time: 0.0284  data_time: 0.0012  memory: 424  
2024/03/01 14:41:23 - mmengine - INFO - Iter(val) [9150/9234]    eta: 0:00:02  time: 0.0291  data_time: 0.0013  memory: 424  
2024/03/01 14:41:24 - mmengine - INFO - Iter(val) [9200/9234]    eta: 0:00:00  time: 0.0252  data_time: 0.0010  memory: 424  
2024/03/01 14:43:59 - mmengine - INFO - Iter(val) [9234/9234]    reid-metric/mAP: 0.5030  reid-metric/R1: 0.9850  reid-metric/R5: 0.9950  reid-metric/R10: 0.9960  reid-metric/R20: 0.9980  data_time: 0.0013  time: 0.0291
2024/03/01 14:44:14 - mmengine - INFO - Iter(train) [  4050/140000]  lr: 1.0000e-02  eta: 16:42:43  time: 3.3826  data_time: 3.0848  memory: 7197  loss: 0.7619  triplet_loss: 0.1726  ce_loss: 0.5893  accuracy_top-1: 84.3750
2024/03/01 14:44:24 - mmengine - INFO - Iter(train) [  4100/140000]  lr: 1.0000e-02  eta: 16:35:24  time: 0.1912  data_time: 0.0070  memory: 7197  loss: 0.6751  triplet_loss: 0.1138  ce_loss: 0.5613  accuracy_top-1: 92.1875
2024/03/01 14:44:33 - mmengine - INFO - Iter(train) [  4150/140000]  lr: 1.0000e-02  eta: 16:28:21  time: 0.1941  data_time: 0.0071  memory: 7197  loss: 0.7150  triplet_loss: 0.1462  ce_loss: 0.5688  accuracy_top-1: 75.0000
2024/03/01 14:44:43 - mmengine - INFO - Iter(train) [  4200/140000]  lr: 1.0000e-02  eta: 16:21:26  time: 0.1933  data_time: 0.0072  memory: 7197  loss: 0.7273  triplet_loss: 0.1373  ce_loss: 0.5900  accuracy_top-1: 71.8750
2024/03/01 14:44:53 - mmengine - INFO - Iter(train) [  4250/140000]  lr: 1.0000e-02  eta: 16:14:42  time: 0.1946  data_time: 0.0075  memory: 7197  loss: 0.6927  triplet_loss: 0.1412  ce_loss: 0.5516  accuracy_top-1: 81.2500
2024/03/01 14:45:03 - mmengine - INFO - Iter(train) [  4300/140000]  lr: 1.0000e-02  eta: 16:08:22  time: 0.2036  data_time: 0.0074  memory: 7197  loss: 0.7016  triplet_loss: 0.1397  ce_loss: 0.5619  accuracy_top-1: 96.8750
2024/03/01 14:45:18 - mmengine - INFO - Iter(train) [  4350/140000]  lr: 1.0000e-02  eta: 16:04:53  time: 0.3077  data_time: 0.0077  memory: 7197  loss: 0.6534  triplet_loss: 0.1174  ce_loss: 0.5360  accuracy_top-1: 87.5000
2024/03/01 14:45:28 - mmengine - INFO - Iter(train) [  4400/140000]  lr: 1.0000e-02  eta: 15:58:37  time: 0.1969  data_time: 0.0076  memory: 7197  loss: 0.5641  triplet_loss: 0.0860  ce_loss: 0.4781  accuracy_top-1: 85.9375
2024/03/01 14:45:38 - mmengine - INFO - Iter(train) [  4450/140000]  lr: 1.0000e-02  eta: 15:52:28  time: 0.1959  data_time: 0.0074  memory: 7197  loss: 0.5661  triplet_loss: 0.1081  ce_loss: 0.4580  accuracy_top-1: 93.7500
2024/03/01 14:45:48 - mmengine - INFO - Iter(train) [  4500/140000]  lr: 1.0000e-02  eta: 15:46:30  time: 0.1973  data_time: 0.0075  memory: 7197  loss: 0.5724  triplet_loss: 0.1003  ce_loss: 0.4721  accuracy_top-1: 73.4375
2024/03/01 14:45:58 - mmengine - INFO - Iter(train) [  4550/140000]  lr: 1.0000e-02  eta: 15:40:37  time: 0.1962  data_time: 0.0075  memory: 7197  loss: 0.5334  triplet_loss: 0.0868  ce_loss: 0.4466  accuracy_top-1: 84.3750
